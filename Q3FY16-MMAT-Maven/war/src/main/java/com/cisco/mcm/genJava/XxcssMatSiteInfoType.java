/*****************************************************************************
 * XxcssMatSiteInfoType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssMatSiteInfoType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssMatSiteInfoType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssMatSiteInfoType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssMatSiteInfoType) factoryClass.newInstance();
    }

public XxcssMatSiteInfoType() {
        custName=MISSING_CHAR;
        street1=MISSING_CHAR;
        street2=MISSING_CHAR;
        street3=MISSING_CHAR;
        street4=MISSING_CHAR;
        city=MISSING_CHAR;
        state=MISSING_CHAR;
        province=MISSING_CHAR;
        zipcode=MISSING_CHAR;
        country=MISSING_CHAR;
        siteId=MISSING_CHAR;
        siteLoc=MISSING_CHAR;
        addrId=MISSING_NUM;
        custNum=MISSING_CHAR;
        custId=MISSING_NUM;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private String custName;
    private String street1;
    private String street2;
    private String street3;
    private String street4;
    private String city;
    private String state;
    private String province;
    private String zipcode;
    private String country;
    private String siteId;
    private String siteLoc;
    private BigDecimal addrId;
    private String custNum;
    private BigDecimal custId;


    // getter methods
    public String getCustName() {
        return custName;
    }
    public String getStreet1() {
        return street1;
    }
    public String getStreet2() {
        return street2;
    }
    public String getStreet3() {
        return street3;
    }
    public String getStreet4() {
        return street4;
    }
    public String getCity() {
        return city;
    }
    public String getState() {
        return state;
    }
    public String getProvince() {
        return province;
    }
    public String getZipcode() {
        return zipcode;
    }
    public String getCountry() {
        return country;
    }
    public String getSiteId() {
        return siteId;
    }
    public String getSiteLoc() {
        return siteLoc;
    }
    public BigDecimal getAddrId() {
        return addrId;
    }
    public String getCustNum() {
        return custNum;
    }
    public BigDecimal getCustId() {
        return custId;
    }

    // setter methods                       
    public void setCustName(String aCustName) {
        custName = aCustName;
    }
    public void setStreet1(String aStreet1) {
        street1 = aStreet1;
    }
    public void setStreet2(String aStreet2) {
        street2 = aStreet2;
    }
    public void setStreet3(String aStreet3) {
        street3 = aStreet3;
    }
    public void setStreet4(String aStreet4) {
        street4 = aStreet4;
    }
    public void setCity(String aCity) {
        city = aCity;
    }
    public void setState(String aState) {
        state = aState;
    }
    public void setProvince(String aProvince) {
        province = aProvince;
    }
    public void setZipcode(String aZipcode) {
        zipcode = aZipcode;
    }
    public void setCountry(String aCountry) {
        country = aCountry;
    }
    public void setSiteId(String aSiteId) {
        siteId = aSiteId;
    }
    public void setSiteLoc(String aSiteLoc) {
        siteLoc = aSiteLoc;
    }
    public void setAddrId(BigDecimal aAddrId) {
        addrId = aAddrId;
    }
    public void setCustNum(String aCustNum) {
        custNum = aCustNum;
    }
    public void setCustId(BigDecimal aCustId) {
        custId = aCustId;
    }


    // other methods


    public XxcssMatSiteInfoType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        custName=(String)attributes[0];
        street1=(String)attributes[1];
        street2=(String)attributes[2];
        street3=(String)attributes[3];
        street4=(String)attributes[4];
        city=(String)attributes[5];
        state=(String)attributes[6];
        province=(String)attributes[7];
        zipcode=(String)attributes[8];
        country=(String)attributes[9];
        siteId=(String)attributes[10];
        siteLoc=(String)attributes[11];
        addrId=(BigDecimal)attributes[12];
        custNum=(String)attributes[13];
        custId=(BigDecimal)attributes[14];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_MAT_SITE_INFO_TYPE",conn);
        Object[] attributes = new Object[]{
            ((custName==null) ? null : new CHAR(custName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((street1==null) ? null : new CHAR(street1,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((street2==null) ? null : new CHAR(street2,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((street3==null) ? null : new CHAR(street3,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((street4==null) ? null : new CHAR(street4,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((city==null) ? null : new CHAR(city,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((state==null) ? null : new CHAR(state,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((province==null) ? null : new CHAR(province,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((zipcode==null) ? null : new CHAR(zipcode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((country==null) ? null : new CHAR(country,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((siteId==null) ? null : new CHAR(siteId,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((siteLoc==null) ? null : new CHAR(siteLoc,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            addrId,
            ((custNum==null) ? null : new CHAR(custNum,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            custId
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssMatSiteInfoType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssMatSiteInfoType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("custName=").append(custName);
        sb.append(",street1=").append(street1);
        sb.append(",street2=").append(street2);
        sb.append(",street3=").append(street3);
        sb.append(",street4=").append(street4);
        sb.append(",city=").append(city);
        sb.append(",state=").append(state);
        sb.append(",province=").append(province);
        sb.append(",zipcode=").append(zipcode);
        sb.append(",country=").append(country);
        sb.append(",siteId=").append(siteId);
        sb.append(",siteLoc=").append(siteLoc);
        sb.append(",addrId=").append(addrId);
        sb.append(",custNum=").append(custNum);
        sb.append(",custId=").append(custId);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssMatSiteInfoType theClone = (XxcssMatSiteInfoType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("custName=").append(custName);
        hashStringBuffer.append("street1=").append(street1);
        hashStringBuffer.append("street2=").append(street2);
        hashStringBuffer.append("street3=").append(street3);
        hashStringBuffer.append("street4=").append(street4);
        hashStringBuffer.append("city=").append(city);
        hashStringBuffer.append("state=").append(state);
        hashStringBuffer.append("province=").append(province);
        hashStringBuffer.append("zipcode=").append(zipcode);
        hashStringBuffer.append("country=").append(country);
        hashStringBuffer.append("siteId=").append(siteId);
        hashStringBuffer.append("siteLoc=").append(siteLoc);
        hashStringBuffer.append("addrId=").append(addrId);
        hashStringBuffer.append("custNum=").append(custNum);
        hashStringBuffer.append("custId=").append(custId);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
