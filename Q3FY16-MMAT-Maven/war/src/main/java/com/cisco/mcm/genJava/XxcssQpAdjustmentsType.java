/*****************************************************************************
 * XxcssQpAdjustmentsType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssQpAdjustmentsType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssQpAdjustmentsType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssQpAdjustmentsType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssQpAdjustmentsType) factoryClass.newInstance();
    }

public XxcssQpAdjustmentsType() {
        listHeaderId=MISSING_NUM;
        listLineId=MISSING_NUM;
        modifierNumber=MISSING_CHAR;
        modifierLineNumber=MISSING_CHAR;
        discountName=MISSING_CHAR;
        discountType=MISSING_CHAR;
        discountMethod=MISSING_CHAR;
        discountLevel=MISSING_CHAR;
        bucket=MISSING_NUM;
        automatic=MISSING_CHAR;
        overriddeable=MISSING_CHAR;
        discountPercentage=MISSING_NUM;
        amountReduced=MISSING_NUM;
        adjustedAmount=MISSING_NUM;
        reasonCode=MISSING_CHAR;
        reasonText=MISSING_CHAR;
        passThroughDiscountFlag=MISSING_CHAR;
        transactionHeaderId=MISSING_NUM;
        transactionLineId=MISSING_NUM;
        transactionNumber=MISSING_CHAR;
        transactionLineNumber=MISSING_CHAR;
        modifiedFrom=MISSING_CHAR;
        modifiedTo=MISSING_CHAR;
        estimatedFlag=MISSING_CHAR;
        chargeTypeCode=MISSING_CHAR;
        chargeSubtypeCode=MISSING_CHAR;
        rangeBreakQuantity=MISSING_NUM;
        accrualConversionRate=MISSING_NUM;
        accrualFlag=MISSING_CHAR;
        benefitQty=MISSING_NUM;
        benefitUomCode=MISSING_CHAR;
        expirationDate=MISSING_DATE;
        rebateTransactionTypeCode=MISSING_CHAR;
        priceBreakTypeCode=MISSING_CHAR;
        substitutionAttribute=MISSING_CHAR;
        creditOrChargeFlag=MISSING_CHAR;
        operandPerPqty=MISSING_NUM;
        adjustedAmountPerPqty=MISSING_NUM;
        pricingPhaseId=MISSING_CHAR;
        updatedFlag=MISSING_CHAR;
        appliedFlag=MISSING_CHAR;
        printOnInvoiceFlag=MISSING_CHAR;
        includeOnReturnsFlag=MISSING_CHAR;
        priceUsedToApplyAdjustment=MISSING_NUM;
        netPriceAfterAdjustment=MISSING_NUM;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal listHeaderId;
    private BigDecimal listLineId;
    private String modifierNumber;
    private String modifierLineNumber;
    private String discountName;
    private String discountType;
    private String discountMethod;
    private String discountLevel;
    private BigDecimal bucket;
    private String automatic;
    private String overriddeable;
    private BigDecimal discountPercentage;
    private BigDecimal amountReduced;
    private BigDecimal adjustedAmount;
    private String reasonCode;
    private String reasonText;
    private String passThroughDiscountFlag;
    private BigDecimal transactionHeaderId;
    private BigDecimal transactionLineId;
    private String transactionNumber;
    private String transactionLineNumber;
    private String modifiedFrom;
    private String modifiedTo;
    private String estimatedFlag;
    private String chargeTypeCode;
    private String chargeSubtypeCode;
    private BigDecimal rangeBreakQuantity;
    private BigDecimal accrualConversionRate;
    private String accrualFlag;
    private BigDecimal benefitQty;
    private String benefitUomCode;
    private Timestamp expirationDate;
    private String rebateTransactionTypeCode;
    private String priceBreakTypeCode;
    private String substitutionAttribute;
    private String creditOrChargeFlag;
    private BigDecimal operandPerPqty;
    private BigDecimal adjustedAmountPerPqty;
    private String pricingPhaseId;
    private String updatedFlag;
    private String appliedFlag;
    private String printOnInvoiceFlag;
    private String includeOnReturnsFlag;
    private BigDecimal priceUsedToApplyAdjustment;
    private BigDecimal netPriceAfterAdjustment;


    // getter methods
    public BigDecimal getListHeaderId() {
        return listHeaderId;
    }
    public BigDecimal getListLineId() {
        return listLineId;
    }
    public String getModifierNumber() {
        return modifierNumber;
    }
    public String getModifierLineNumber() {
        return modifierLineNumber;
    }
    public String getDiscountName() {
        return discountName;
    }
    public String getDiscountType() {
        return discountType;
    }
    public String getDiscountMethod() {
        return discountMethod;
    }
    public String getDiscountLevel() {
        return discountLevel;
    }
    public BigDecimal getBucket() {
        return bucket;
    }
    public String getAutomatic() {
        return automatic;
    }
    public String getOverriddeable() {
        return overriddeable;
    }
    public BigDecimal getDiscountPercentage() {
        return discountPercentage;
    }
    public BigDecimal getAmountReduced() {
        return amountReduced;
    }
    public BigDecimal getAdjustedAmount() {
        return adjustedAmount;
    }
    public String getReasonCode() {
        return reasonCode;
    }
    public String getReasonText() {
        return reasonText;
    }
    public String getPassThroughDiscountFlag() {
        return passThroughDiscountFlag;
    }
    public BigDecimal getTransactionHeaderId() {
        return transactionHeaderId;
    }
    public BigDecimal getTransactionLineId() {
        return transactionLineId;
    }
    public String getTransactionNumber() {
        return transactionNumber;
    }
    public String getTransactionLineNumber() {
        return transactionLineNumber;
    }
    public String getModifiedFrom() {
        return modifiedFrom;
    }
    public String getModifiedTo() {
        return modifiedTo;
    }
    public String getEstimatedFlag() {
        return estimatedFlag;
    }
    public String getChargeTypeCode() {
        return chargeTypeCode;
    }
    public String getChargeSubtypeCode() {
        return chargeSubtypeCode;
    }
    public BigDecimal getRangeBreakQuantity() {
        return rangeBreakQuantity;
    }
    public BigDecimal getAccrualConversionRate() {
        return accrualConversionRate;
    }
    public String getAccrualFlag() {
        return accrualFlag;
    }
    public BigDecimal getBenefitQty() {
        return benefitQty;
    }
    public String getBenefitUomCode() {
        return benefitUomCode;
    }
    public Timestamp getExpirationDate() {
        return expirationDate;
    }
    public String getRebateTransactionTypeCode() {
        return rebateTransactionTypeCode;
    }
    public String getPriceBreakTypeCode() {
        return priceBreakTypeCode;
    }
    public String getSubstitutionAttribute() {
        return substitutionAttribute;
    }
    public String getCreditOrChargeFlag() {
        return creditOrChargeFlag;
    }
    public BigDecimal getOperandPerPqty() {
        return operandPerPqty;
    }
    public BigDecimal getAdjustedAmountPerPqty() {
        return adjustedAmountPerPqty;
    }
    public String getPricingPhaseId() {
        return pricingPhaseId;
    }
    public String getUpdatedFlag() {
        return updatedFlag;
    }
    public String getAppliedFlag() {
        return appliedFlag;
    }
    public String getPrintOnInvoiceFlag() {
        return printOnInvoiceFlag;
    }
    public String getIncludeOnReturnsFlag() {
        return includeOnReturnsFlag;
    }
    public BigDecimal getPriceUsedToApplyAdjustment() {
        return priceUsedToApplyAdjustment;
    }
    public BigDecimal getNetPriceAfterAdjustment() {
        return netPriceAfterAdjustment;
    }

    // setter methods                       
    public void setListHeaderId(BigDecimal aListHeaderId) {
        listHeaderId = aListHeaderId;
    }
    public void setListLineId(BigDecimal aListLineId) {
        listLineId = aListLineId;
    }
    public void setModifierNumber(String aModifierNumber) {
        modifierNumber = aModifierNumber;
    }
    public void setModifierLineNumber(String aModifierLineNumber) {
        modifierLineNumber = aModifierLineNumber;
    }
    public void setDiscountName(String aDiscountName) {
        discountName = aDiscountName;
    }
    public void setDiscountType(String aDiscountType) {
        discountType = aDiscountType;
    }
    public void setDiscountMethod(String aDiscountMethod) {
        discountMethod = aDiscountMethod;
    }
    public void setDiscountLevel(String aDiscountLevel) {
        discountLevel = aDiscountLevel;
    }
    public void setBucket(BigDecimal aBucket) {
        bucket = aBucket;
    }
    public void setAutomatic(String aAutomatic) {
        automatic = aAutomatic;
    }
    public void setOverriddeable(String aOverriddeable) {
        overriddeable = aOverriddeable;
    }
    public void setDiscountPercentage(BigDecimal aDiscountPercentage) {
        discountPercentage = aDiscountPercentage;
    }
    public void setAmountReduced(BigDecimal aAmountReduced) {
        amountReduced = aAmountReduced;
    }
    public void setAdjustedAmount(BigDecimal aAdjustedAmount) {
        adjustedAmount = aAdjustedAmount;
    }
    public void setReasonCode(String aReasonCode) {
        reasonCode = aReasonCode;
    }
    public void setReasonText(String aReasonText) {
        reasonText = aReasonText;
    }
    public void setPassThroughDiscountFlag(String aPassThroughDiscountFlag) {
        passThroughDiscountFlag = aPassThroughDiscountFlag;
    }
    public void setTransactionHeaderId(BigDecimal aTransactionHeaderId) {
        transactionHeaderId = aTransactionHeaderId;
    }
    public void setTransactionLineId(BigDecimal aTransactionLineId) {
        transactionLineId = aTransactionLineId;
    }
    public void setTransactionNumber(String aTransactionNumber) {
        transactionNumber = aTransactionNumber;
    }
    public void setTransactionLineNumber(String aTransactionLineNumber) {
        transactionLineNumber = aTransactionLineNumber;
    }
    public void setModifiedFrom(String aModifiedFrom) {
        modifiedFrom = aModifiedFrom;
    }
    public void setModifiedTo(String aModifiedTo) {
        modifiedTo = aModifiedTo;
    }
    public void setEstimatedFlag(String aEstimatedFlag) {
        estimatedFlag = aEstimatedFlag;
    }
    public void setChargeTypeCode(String aChargeTypeCode) {
        chargeTypeCode = aChargeTypeCode;
    }
    public void setChargeSubtypeCode(String aChargeSubtypeCode) {
        chargeSubtypeCode = aChargeSubtypeCode;
    }
    public void setRangeBreakQuantity(BigDecimal aRangeBreakQuantity) {
        rangeBreakQuantity = aRangeBreakQuantity;
    }
    public void setAccrualConversionRate(BigDecimal aAccrualConversionRate) {
        accrualConversionRate = aAccrualConversionRate;
    }
    public void setAccrualFlag(String aAccrualFlag) {
        accrualFlag = aAccrualFlag;
    }
    public void setBenefitQty(BigDecimal aBenefitQty) {
        benefitQty = aBenefitQty;
    }
    public void setBenefitUomCode(String aBenefitUomCode) {
        benefitUomCode = aBenefitUomCode;
    }
    public void setExpirationDate(Timestamp aExpirationDate) {
        expirationDate = aExpirationDate;
    }
    public void setRebateTransactionTypeCode(String aRebateTransactionTypeCode) {
        rebateTransactionTypeCode = aRebateTransactionTypeCode;
    }
    public void setPriceBreakTypeCode(String aPriceBreakTypeCode) {
        priceBreakTypeCode = aPriceBreakTypeCode;
    }
    public void setSubstitutionAttribute(String aSubstitutionAttribute) {
        substitutionAttribute = aSubstitutionAttribute;
    }
    public void setCreditOrChargeFlag(String aCreditOrChargeFlag) {
        creditOrChargeFlag = aCreditOrChargeFlag;
    }
    public void setOperandPerPqty(BigDecimal aOperandPerPqty) {
        operandPerPqty = aOperandPerPqty;
    }
    public void setAdjustedAmountPerPqty(BigDecimal aAdjustedAmountPerPqty) {
        adjustedAmountPerPqty = aAdjustedAmountPerPqty;
    }
    public void setPricingPhaseId(String aPricingPhaseId) {
        pricingPhaseId = aPricingPhaseId;
    }
    public void setUpdatedFlag(String aUpdatedFlag) {
        updatedFlag = aUpdatedFlag;
    }
    public void setAppliedFlag(String aAppliedFlag) {
        appliedFlag = aAppliedFlag;
    }
    public void setPrintOnInvoiceFlag(String aPrintOnInvoiceFlag) {
        printOnInvoiceFlag = aPrintOnInvoiceFlag;
    }
    public void setIncludeOnReturnsFlag(String aIncludeOnReturnsFlag) {
        includeOnReturnsFlag = aIncludeOnReturnsFlag;
    }
    public void setPriceUsedToApplyAdjustment(BigDecimal aPriceUsedToApplyAdjustment) {
        priceUsedToApplyAdjustment = aPriceUsedToApplyAdjustment;
    }
    public void setNetPriceAfterAdjustment(BigDecimal aNetPriceAfterAdjustment) {
        netPriceAfterAdjustment = aNetPriceAfterAdjustment;
    }


    // other methods


    public XxcssQpAdjustmentsType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        listHeaderId=(BigDecimal)attributes[0];
        listLineId=(BigDecimal)attributes[1];
        modifierNumber=(String)attributes[2];
        modifierLineNumber=(String)attributes[3];
        discountName=(String)attributes[4];
        discountType=(String)attributes[5];
        discountMethod=(String)attributes[6];
        discountLevel=(String)attributes[7];
        bucket=(BigDecimal)attributes[8];
        automatic=(String)attributes[9];
        overriddeable=(String)attributes[10];
        discountPercentage=(BigDecimal)attributes[11];
        amountReduced=(BigDecimal)attributes[12];
        adjustedAmount=(BigDecimal)attributes[13];
        reasonCode=(String)attributes[14];
        reasonText=(String)attributes[15];
        passThroughDiscountFlag=(String)attributes[16];
        transactionHeaderId=(BigDecimal)attributes[17];
        transactionLineId=(BigDecimal)attributes[18];
        transactionNumber=(String)attributes[19];
        transactionLineNumber=(String)attributes[20];
        modifiedFrom=(String)attributes[21];
        modifiedTo=(String)attributes[22];
        estimatedFlag=(String)attributes[23];
        chargeTypeCode=(String)attributes[24];
        chargeSubtypeCode=(String)attributes[25];
        rangeBreakQuantity=(BigDecimal)attributes[26];
        accrualConversionRate=(BigDecimal)attributes[27];
        accrualFlag=(String)attributes[28];
        benefitQty=(BigDecimal)attributes[29];
        benefitUomCode=(String)attributes[30];
        expirationDate=(Timestamp)attributes[31];
        rebateTransactionTypeCode=(String)attributes[32];
        priceBreakTypeCode=(String)attributes[33];
        substitutionAttribute=(String)attributes[34];
        creditOrChargeFlag=(String)attributes[35];
        operandPerPqty=(BigDecimal)attributes[36];
        adjustedAmountPerPqty=(BigDecimal)attributes[37];
        pricingPhaseId=(String)attributes[38];
        updatedFlag=(String)attributes[39];
        appliedFlag=(String)attributes[40];
        printOnInvoiceFlag=(String)attributes[41];
        includeOnReturnsFlag=(String)attributes[42];
        priceUsedToApplyAdjustment=(BigDecimal)attributes[43];
        netPriceAfterAdjustment=(BigDecimal)attributes[44];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_QP_ADJUSTMENTS_TYPE",conn);
        Object[] attributes = new Object[]{
            listHeaderId,
            listLineId,
            ((modifierNumber==null) ? null : new CHAR(modifierNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((modifierLineNumber==null) ? null : new CHAR(modifierLineNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((discountName==null) ? null : new CHAR(discountName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((discountType==null) ? null : new CHAR(discountType,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((discountMethod==null) ? null : new CHAR(discountMethod,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((discountLevel==null) ? null : new CHAR(discountLevel,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            bucket,
            ((automatic==null) ? null : new CHAR(automatic,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((overriddeable==null) ? null : new CHAR(overriddeable,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            discountPercentage,
            amountReduced,
            adjustedAmount,
            ((reasonCode==null) ? null : new CHAR(reasonCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((reasonText==null) ? null : new CHAR(reasonText,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((passThroughDiscountFlag==null) ? null : new CHAR(passThroughDiscountFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            transactionHeaderId,
            transactionLineId,
            ((transactionNumber==null) ? null : new CHAR(transactionNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((transactionLineNumber==null) ? null : new CHAR(transactionLineNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((modifiedFrom==null) ? null : new CHAR(modifiedFrom,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((modifiedTo==null) ? null : new CHAR(modifiedTo,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((estimatedFlag==null) ? null : new CHAR(estimatedFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((chargeTypeCode==null) ? null : new CHAR(chargeTypeCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((chargeSubtypeCode==null) ? null : new CHAR(chargeSubtypeCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            rangeBreakQuantity,
            accrualConversionRate,
            ((accrualFlag==null) ? null : new CHAR(accrualFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            benefitQty,
            ((benefitUomCode==null) ? null : new CHAR(benefitUomCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            expirationDate,
            ((rebateTransactionTypeCode==null) ? null : new CHAR(rebateTransactionTypeCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((priceBreakTypeCode==null) ? null : new CHAR(priceBreakTypeCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((substitutionAttribute==null) ? null : new CHAR(substitutionAttribute,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((creditOrChargeFlag==null) ? null : new CHAR(creditOrChargeFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            operandPerPqty,
            adjustedAmountPerPqty,
            ((pricingPhaseId==null) ? null : new CHAR(pricingPhaseId,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((updatedFlag==null) ? null : new CHAR(updatedFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((appliedFlag==null) ? null : new CHAR(appliedFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((printOnInvoiceFlag==null) ? null : new CHAR(printOnInvoiceFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((includeOnReturnsFlag==null) ? null : new CHAR(includeOnReturnsFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            priceUsedToApplyAdjustment,
            netPriceAfterAdjustment
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssQpAdjustmentsType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssQpAdjustmentsType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("listHeaderId=").append(listHeaderId);
        sb.append(",listLineId=").append(listLineId);
        sb.append(",modifierNumber=").append(modifierNumber);
        sb.append(",modifierLineNumber=").append(modifierLineNumber);
        sb.append(",discountName=").append(discountName);
        sb.append(",discountType=").append(discountType);
        sb.append(",discountMethod=").append(discountMethod);
        sb.append(",discountLevel=").append(discountLevel);
        sb.append(",bucket=").append(bucket);
        sb.append(",automatic=").append(automatic);
        sb.append(",overriddeable=").append(overriddeable);
        sb.append(",discountPercentage=").append(discountPercentage);
        sb.append(",amountReduced=").append(amountReduced);
        sb.append(",adjustedAmount=").append(adjustedAmount);
        sb.append(",reasonCode=").append(reasonCode);
        sb.append(",reasonText=").append(reasonText);
        sb.append(",passThroughDiscountFlag=").append(passThroughDiscountFlag);
        sb.append(",transactionHeaderId=").append(transactionHeaderId);
        sb.append(",transactionLineId=").append(transactionLineId);
        sb.append(",transactionNumber=").append(transactionNumber);
        sb.append(",transactionLineNumber=").append(transactionLineNumber);
        sb.append(",modifiedFrom=").append(modifiedFrom);
        sb.append(",modifiedTo=").append(modifiedTo);
        sb.append(",estimatedFlag=").append(estimatedFlag);
        sb.append(",chargeTypeCode=").append(chargeTypeCode);
        sb.append(",chargeSubtypeCode=").append(chargeSubtypeCode);
        sb.append(",rangeBreakQuantity=").append(rangeBreakQuantity);
        sb.append(",accrualConversionRate=").append(accrualConversionRate);
        sb.append(",accrualFlag=").append(accrualFlag);
        sb.append(",benefitQty=").append(benefitQty);
        sb.append(",benefitUomCode=").append(benefitUomCode);
        sb.append(",expirationDate=").append(expirationDate);
        sb.append(",rebateTransactionTypeCode=").append(rebateTransactionTypeCode);
        sb.append(",priceBreakTypeCode=").append(priceBreakTypeCode);
        sb.append(",substitutionAttribute=").append(substitutionAttribute);
        sb.append(",creditOrChargeFlag=").append(creditOrChargeFlag);
        sb.append(",operandPerPqty=").append(operandPerPqty);
        sb.append(",adjustedAmountPerPqty=").append(adjustedAmountPerPqty);
        sb.append(",pricingPhaseId=").append(pricingPhaseId);
        sb.append(",updatedFlag=").append(updatedFlag);
        sb.append(",appliedFlag=").append(appliedFlag);
        sb.append(",printOnInvoiceFlag=").append(printOnInvoiceFlag);
        sb.append(",includeOnReturnsFlag=").append(includeOnReturnsFlag);
        sb.append(",priceUsedToApplyAdjustment=").append(priceUsedToApplyAdjustment);
        sb.append(",netPriceAfterAdjustment=").append(netPriceAfterAdjustment);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssQpAdjustmentsType theClone = (XxcssQpAdjustmentsType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("listHeaderId=").append(listHeaderId);
        hashStringBuffer.append("listLineId=").append(listLineId);
        hashStringBuffer.append("modifierNumber=").append(modifierNumber);
        hashStringBuffer.append("modifierLineNumber=").append(modifierLineNumber);
        hashStringBuffer.append("discountName=").append(discountName);
        hashStringBuffer.append("discountType=").append(discountType);
        hashStringBuffer.append("discountMethod=").append(discountMethod);
        hashStringBuffer.append("discountLevel=").append(discountLevel);
        hashStringBuffer.append("bucket=").append(bucket);
        hashStringBuffer.append("automatic=").append(automatic);
        hashStringBuffer.append("overriddeable=").append(overriddeable);
        hashStringBuffer.append("discountPercentage=").append(discountPercentage);
        hashStringBuffer.append("amountReduced=").append(amountReduced);
        hashStringBuffer.append("adjustedAmount=").append(adjustedAmount);
        hashStringBuffer.append("reasonCode=").append(reasonCode);
        hashStringBuffer.append("reasonText=").append(reasonText);
        hashStringBuffer.append("passThroughDiscountFlag=").append(passThroughDiscountFlag);
        hashStringBuffer.append("transactionHeaderId=").append(transactionHeaderId);
        hashStringBuffer.append("transactionLineId=").append(transactionLineId);
        hashStringBuffer.append("transactionNumber=").append(transactionNumber);
        hashStringBuffer.append("transactionLineNumber=").append(transactionLineNumber);
        hashStringBuffer.append("modifiedFrom=").append(modifiedFrom);
        hashStringBuffer.append("modifiedTo=").append(modifiedTo);
        hashStringBuffer.append("estimatedFlag=").append(estimatedFlag);
        hashStringBuffer.append("chargeTypeCode=").append(chargeTypeCode);
        hashStringBuffer.append("chargeSubtypeCode=").append(chargeSubtypeCode);
        hashStringBuffer.append("rangeBreakQuantity=").append(rangeBreakQuantity);
        hashStringBuffer.append("accrualConversionRate=").append(accrualConversionRate);
        hashStringBuffer.append("accrualFlag=").append(accrualFlag);
        hashStringBuffer.append("benefitQty=").append(benefitQty);
        hashStringBuffer.append("benefitUomCode=").append(benefitUomCode);
        hashStringBuffer.append("expirationDate=").append(expirationDate);
        hashStringBuffer.append("rebateTransactionTypeCode=").append(rebateTransactionTypeCode);
        hashStringBuffer.append("priceBreakTypeCode=").append(priceBreakTypeCode);
        hashStringBuffer.append("substitutionAttribute=").append(substitutionAttribute);
        hashStringBuffer.append("creditOrChargeFlag=").append(creditOrChargeFlag);
        hashStringBuffer.append("operandPerPqty=").append(operandPerPqty);
        hashStringBuffer.append("adjustedAmountPerPqty=").append(adjustedAmountPerPqty);
        hashStringBuffer.append("pricingPhaseId=").append(pricingPhaseId);
        hashStringBuffer.append("updatedFlag=").append(updatedFlag);
        hashStringBuffer.append("appliedFlag=").append(appliedFlag);
        hashStringBuffer.append("printOnInvoiceFlag=").append(printOnInvoiceFlag);
        hashStringBuffer.append("includeOnReturnsFlag=").append(includeOnReturnsFlag);
        hashStringBuffer.append("priceUsedToApplyAdjustment=").append(priceUsedToApplyAdjustment);
        hashStringBuffer.append("netPriceAfterAdjustment=").append(netPriceAfterAdjustment);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
