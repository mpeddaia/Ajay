/*****************************************************************************
 * XxcssQpHeaderType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssQpHeaderType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssQpHeaderType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssQpHeaderType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssQpHeaderType) factoryClass.newInstance();
    }

public XxcssQpHeaderType() {
        transactionHeaderId=MISSING_NUM;
        transactionLineId=MISSING_NUM;
        transactionNumber=MISSING_CHAR;
        transactionLineNumber=MISSING_CHAR;
        transactionType=MISSING_CHAR;
        requestType=MISSING_CHAR;
        pricingEvent=MISSING_CHAR;
        estimateFlag=MISSING_CHAR;
        transactionCurrencyCode=MISSING_CHAR;
        customerNumber=MISSING_NUM;
        priceListId=MISSING_NUM;
        intendedUse=MISSING_CHAR;
        billToId=MISSING_NUM;
        billToCountryCode=MISSING_CHAR;
        notToExceedAmount=MISSING_NUM;
        statusDetails=null;
        billToTheater=MISSING_CHAR;
        billToGeo=MISSING_CHAR;
        attribute1=MISSING_CHAR;
        attribute2=MISSING_CHAR;
        attribute3=MISSING_CHAR;
        attribute4=MISSING_CHAR;
        attribute5=MISSING_CHAR;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal transactionHeaderId;
    private BigDecimal transactionLineId;
    private String transactionNumber;
    private String transactionLineNumber;
    private String transactionType;
    private String requestType;
    private String pricingEvent;
    private String estimateFlag;
    private String transactionCurrencyCode;
    private BigDecimal customerNumber;
    private BigDecimal priceListId;
    private String intendedUse;
    private BigDecimal billToId;
    private String billToCountryCode;
    private BigDecimal notToExceedAmount;
    private com.cisco.mcm.genJava.XxcssIlErrorMessageObj statusDetails;
    private String billToTheater;
    private String billToGeo;
    private String attribute1;
    private String attribute2;
    private String attribute3;
    private String attribute4;
    private String attribute5;


    // getter methods
    public BigDecimal getTransactionHeaderId() {
        return transactionHeaderId;
    }
    public BigDecimal getTransactionLineId() {
        return transactionLineId;
    }
    public String getTransactionNumber() {
        return transactionNumber;
    }
    public String getTransactionLineNumber() {
        return transactionLineNumber;
    }
    public String getTransactionType() {
        return transactionType;
    }
    public String getRequestType() {
        return requestType;
    }
    public String getPricingEvent() {
        return pricingEvent;
    }
    public String getEstimateFlag() {
        return estimateFlag;
    }
    public String getTransactionCurrencyCode() {
        return transactionCurrencyCode;
    }
    public BigDecimal getCustomerNumber() {
        return customerNumber;
    }
    public BigDecimal getPriceListId() {
        return priceListId;
    }
    public String getIntendedUse() {
        return intendedUse;
    }
    public BigDecimal getBillToId() {
        return billToId;
    }
    public String getBillToCountryCode() {
        return billToCountryCode;
    }
    public BigDecimal getNotToExceedAmount() {
        return notToExceedAmount;
    }
    public com.cisco.mcm.genJava.XxcssIlErrorMessageObj getStatusDetails() {
        return statusDetails;
    }
    public String getBillToTheater() {
        return billToTheater;
    }
    public String getBillToGeo() {
        return billToGeo;
    }
    public String getAttribute1() {
        return attribute1;
    }
    public String getAttribute2() {
        return attribute2;
    }
    public String getAttribute3() {
        return attribute3;
    }
    public String getAttribute4() {
        return attribute4;
    }
    public String getAttribute5() {
        return attribute5;
    }

    // setter methods                       
    public void setTransactionHeaderId(BigDecimal aTransactionHeaderId) {
        transactionHeaderId = aTransactionHeaderId;
    }
    public void setTransactionLineId(BigDecimal aTransactionLineId) {
        transactionLineId = aTransactionLineId;
    }
    public void setTransactionNumber(String aTransactionNumber) {
        transactionNumber = aTransactionNumber;
    }
    public void setTransactionLineNumber(String aTransactionLineNumber) {
        transactionLineNumber = aTransactionLineNumber;
    }
    public void setTransactionType(String aTransactionType) {
        transactionType = aTransactionType;
    }
    public void setRequestType(String aRequestType) {
        requestType = aRequestType;
    }
    public void setPricingEvent(String aPricingEvent) {
        pricingEvent = aPricingEvent;
    }
    public void setEstimateFlag(String aEstimateFlag) {
        estimateFlag = aEstimateFlag;
    }
    public void setTransactionCurrencyCode(String aTransactionCurrencyCode) {
        transactionCurrencyCode = aTransactionCurrencyCode;
    }
    public void setCustomerNumber(BigDecimal aCustomerNumber) {
        customerNumber = aCustomerNumber;
    }
    public void setPriceListId(BigDecimal aPriceListId) {
        priceListId = aPriceListId;
    }
    public void setIntendedUse(String aIntendedUse) {
        intendedUse = aIntendedUse;
    }
    public void setBillToId(BigDecimal aBillToId) {
        billToId = aBillToId;
    }
    public void setBillToCountryCode(String aBillToCountryCode) {
        billToCountryCode = aBillToCountryCode;
    }
    public void setNotToExceedAmount(BigDecimal aNotToExceedAmount) {
        notToExceedAmount = aNotToExceedAmount;
    }
    public void setStatusDetails(com.cisco.mcm.genJava.XxcssIlErrorMessageObj aStatusDetails) {
        statusDetails = aStatusDetails;
    }
    public void setBillToTheater(String aBillToTheater) {
        billToTheater = aBillToTheater;
    }
    public void setBillToGeo(String aBillToGeo) {
        billToGeo = aBillToGeo;
    }
    public void setAttribute1(String aAttribute1) {
        attribute1 = aAttribute1;
    }
    public void setAttribute2(String aAttribute2) {
        attribute2 = aAttribute2;
    }
    public void setAttribute3(String aAttribute3) {
        attribute3 = aAttribute3;
    }
    public void setAttribute4(String aAttribute4) {
        attribute4 = aAttribute4;
    }
    public void setAttribute5(String aAttribute5) {
        attribute5 = aAttribute5;
    }


    // other methods
    private static com.cisco.mcm.genJava.XxcssIlErrorMessageObj buildFromStruct(Connection conn,com.cisco.mcm.genJava.XxcssIlErrorMessageObj attribute,STRUCT struct)
        throws SQLException,InstantiationException,IllegalAccessException {
        com.cisco.mcm.genJava.XxcssIlErrorMessageObj obj=null;
        if (struct==null) {   
            obj=null;
        } else {
            if (attribute==null) {
                obj=com.cisco.mcm.genJava.XxcssIlErrorMessageObj.newFromStruct(conn,struct);
            } else {
                obj=attribute;
                obj.loadFromStruct(conn,struct);
            }
        }
        return obj;
    }


    public XxcssQpHeaderType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        transactionHeaderId=(BigDecimal)attributes[0];
        transactionLineId=(BigDecimal)attributes[1];
        transactionNumber=(String)attributes[2];
        transactionLineNumber=(String)attributes[3];
        transactionType=(String)attributes[4];
        requestType=(String)attributes[5];
        pricingEvent=(String)attributes[6];
        estimateFlag=(String)attributes[7];
        transactionCurrencyCode=(String)attributes[8];
        customerNumber=(BigDecimal)attributes[9];
        priceListId=(BigDecimal)attributes[10];
        intendedUse=(String)attributes[11];
        billToId=(BigDecimal)attributes[12];
        billToCountryCode=(String)attributes[13];
        notToExceedAmount=(BigDecimal)attributes[14];
        statusDetails=buildFromStruct(conn,statusDetails,(STRUCT)attributes[15]);
        billToTheater=(String)attributes[16];
        billToGeo=(String)attributes[17];
        attribute1=(String)attributes[18];
        attribute2=(String)attributes[19];
        attribute3=(String)attributes[20];
        attribute4=(String)attributes[21];
        attribute5=(String)attributes[22];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_QP_HEADER_TYPE",conn);
        Object[] attributes = new Object[]{
            transactionHeaderId,
            transactionLineId,
            ((transactionNumber==null) ? null : new CHAR(transactionNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((transactionLineNumber==null) ? null : new CHAR(transactionLineNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((transactionType==null) ? null : new CHAR(transactionType,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((requestType==null) ? null : new CHAR(requestType,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((pricingEvent==null) ? null : new CHAR(pricingEvent,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((estimateFlag==null) ? null : new CHAR(estimateFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((transactionCurrencyCode==null) ? null : new CHAR(transactionCurrencyCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            customerNumber,
            priceListId,
            ((intendedUse==null) ? null : new CHAR(intendedUse,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            billToId,
            ((billToCountryCode==null) ? null : new CHAR(billToCountryCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            notToExceedAmount,
            ((statusDetails!=null) ? statusDetails.asStruct(conn) : null),
            ((billToTheater==null) ? null : new CHAR(billToTheater,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((billToGeo==null) ? null : new CHAR(billToGeo,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute1==null) ? null : new CHAR(attribute1,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute2==null) ? null : new CHAR(attribute2,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute3==null) ? null : new CHAR(attribute3,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute4==null) ? null : new CHAR(attribute4,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute5==null) ? null : new CHAR(attribute5,CharacterSet.make(CharacterSet.UTF8_CHARSET)))
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssQpHeaderType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssQpHeaderType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("transactionHeaderId=").append(transactionHeaderId);
        sb.append(",transactionLineId=").append(transactionLineId);
        sb.append(",transactionNumber=").append(transactionNumber);
        sb.append(",transactionLineNumber=").append(transactionLineNumber);
        sb.append(",transactionType=").append(transactionType);
        sb.append(",requestType=").append(requestType);
        sb.append(",pricingEvent=").append(pricingEvent);
        sb.append(",estimateFlag=").append(estimateFlag);
        sb.append(",transactionCurrencyCode=").append(transactionCurrencyCode);
        sb.append(",customerNumber=").append(customerNumber);
        sb.append(",priceListId=").append(priceListId);
        sb.append(",intendedUse=").append(intendedUse);
        sb.append(",billToId=").append(billToId);
        sb.append(",billToCountryCode=").append(billToCountryCode);
        sb.append(",notToExceedAmount=").append(notToExceedAmount);
        sb.append(",statusDetails=").append(statusDetails);
        sb.append(",billToTheater=").append(billToTheater);
        sb.append(",billToGeo=").append(billToGeo);
        sb.append(",attribute1=").append(attribute1);
        sb.append(",attribute2=").append(attribute2);
        sb.append(",attribute3=").append(attribute3);
        sb.append(",attribute4=").append(attribute4);
        sb.append(",attribute5=").append(attribute5);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssQpHeaderType theClone = (XxcssQpHeaderType) super.clone();
        
        theClone.setStatusDetails((statusDetails==null) ? null : (com.cisco.mcm.genJava.XxcssIlErrorMessageObj) statusDetails.clone());


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("transactionHeaderId=").append(transactionHeaderId);
        hashStringBuffer.append("transactionLineId=").append(transactionLineId);
        hashStringBuffer.append("transactionNumber=").append(transactionNumber);
        hashStringBuffer.append("transactionLineNumber=").append(transactionLineNumber);
        hashStringBuffer.append("transactionType=").append(transactionType);
        hashStringBuffer.append("requestType=").append(requestType);
        hashStringBuffer.append("pricingEvent=").append(pricingEvent);
        hashStringBuffer.append("estimateFlag=").append(estimateFlag);
        hashStringBuffer.append("transactionCurrencyCode=").append(transactionCurrencyCode);
        hashStringBuffer.append("customerNumber=").append(customerNumber);
        hashStringBuffer.append("priceListId=").append(priceListId);
        hashStringBuffer.append("intendedUse=").append(intendedUse);
        hashStringBuffer.append("billToId=").append(billToId);
        hashStringBuffer.append("billToCountryCode=").append(billToCountryCode);
        hashStringBuffer.append("notToExceedAmount=").append(notToExceedAmount);
        hashStringBuffer.append((statusDetails==null) ? "null" : statusDetails.hashCode()+"");
        hashStringBuffer.append("billToTheater=").append(billToTheater);
        hashStringBuffer.append("billToGeo=").append(billToGeo);
        hashStringBuffer.append("attribute1=").append(attribute1);
        hashStringBuffer.append("attribute2=").append(attribute2);
        hashStringBuffer.append("attribute3=").append(attribute3);
        hashStringBuffer.append("attribute4=").append(attribute4);
        hashStringBuffer.append("attribute5=").append(attribute5);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
