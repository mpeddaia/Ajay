/*****************************************************************************
 * CountryMigationRecType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import oracle.sql.*;
import java.sql.*;
import java.math.BigDecimal;
import java.util.*;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class CountryMigationRecType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = CountryMigationRecType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static CountryMigationRecType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (CountryMigationRecType) factoryClass.newInstance();
    }

public CountryMigationRecType() {
        contractNumber=MISSING_NUM;
        contractStatus=MISSING_CHAR;
        stcMigCompleted=MISSING_CHAR;
        customerName=MISSING_CHAR;
        oldCustomerId=MISSING_CHAR;
        newCustomerId=MISSING_CHAR;
        oldBusinessEntity=MISSING_CHAR;
        newBusinessEntity=MISSING_CHAR;
        billToAddress=MISSING_CHAR;
        oldBillToSiteId=MISSING_NUM;
        newBillToSiteId=MISSING_NUM;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal contractNumber;
    private String contractStatus;
    private String stcMigCompleted;
    private String customerName;
    private String oldCustomerId;
    private String newCustomerId;
    private String oldBusinessEntity;
    private String newBusinessEntity;
    private String billToAddress;
    private BigDecimal oldBillToSiteId;
    private BigDecimal newBillToSiteId;


    // getter methods
    public BigDecimal getContractNumber() {
        return contractNumber;
    }
    public String getContractStatus() {
        return contractStatus;
    }
    public String getStcMigCompleted() {
        return stcMigCompleted;
    }
    public String getCustomerName() {
        return customerName;
    }
    public String getOldCustomerId() {
        return oldCustomerId;
    }
    public String getNewCustomerId() {
        return newCustomerId;
    }
    public String getOldBusinessEntity() {
        return oldBusinessEntity;
    }
    public String getNewBusinessEntity() {
        return newBusinessEntity;
    }
    public String getBillToAddress() {
        return billToAddress;
    }
    public BigDecimal getOldBillToSiteId() {
        return oldBillToSiteId;
    }
    public BigDecimal getNewBillToSiteId() {
        return newBillToSiteId;
    }

    // setter methods                       
    public void setContractNumber(BigDecimal aContractNumber) {
        contractNumber = aContractNumber;
    }
    public void setContractStatus(String aContractStatus) {
        contractStatus = aContractStatus;
    }
    public void setStcMigCompleted(String aStcMigCompleted) {
        stcMigCompleted = aStcMigCompleted;
    }
    public void setCustomerName(String aCustomerName) {
        customerName = aCustomerName;
    }
    public void setOldCustomerId(String aOldCustomerId) {
        oldCustomerId = aOldCustomerId;
    }
    public void setNewCustomerId(String aNewCustomerId) {
        newCustomerId = aNewCustomerId;
    }
    public void setOldBusinessEntity(String aOldBusinessEntity) {
        oldBusinessEntity = aOldBusinessEntity;
    }
    public void setNewBusinessEntity(String aNewBusinessEntity) {
        newBusinessEntity = aNewBusinessEntity;
    }
    public void setBillToAddress(String aBillToAddress) {
        billToAddress = aBillToAddress;
    }
    public void setOldBillToSiteId(BigDecimal aOldBillToSiteId) {
        oldBillToSiteId = aOldBillToSiteId;
    }
    public void setNewBillToSiteId(BigDecimal aNewBillToSiteId) {
        newBillToSiteId = aNewBillToSiteId;
    }


    // other methods


    public CountryMigationRecType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        contractNumber=(BigDecimal)attributes[0];
        contractStatus=(String)attributes[1];
        stcMigCompleted=(String)attributes[2];
        customerName=(String)attributes[3];
        oldCustomerId=(String)attributes[4];
        newCustomerId=(String)attributes[5];
        oldBusinessEntity=(String)attributes[6];
        newBusinessEntity=(String)attributes[7];
        billToAddress=(String)attributes[8];
        oldBillToSiteId=(BigDecimal)attributes[9];
        newBillToSiteId=(BigDecimal)attributes[10];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.COUNTRY_MIGATION_REC_TYPE",conn);
        Object[] attributes = new Object[]{
            contractNumber,
            ((contractStatus==null) ? null : new CHAR(contractStatus,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((stcMigCompleted==null) ? null : new CHAR(stcMigCompleted,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((customerName==null) ? null : new CHAR(customerName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((oldCustomerId==null) ? null : new CHAR(oldCustomerId,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((newCustomerId==null) ? null : new CHAR(newCustomerId,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((oldBusinessEntity==null) ? null : new CHAR(oldBusinessEntity,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((newBusinessEntity==null) ? null : new CHAR(newBusinessEntity,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((billToAddress==null) ? null : new CHAR(billToAddress,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            oldBillToSiteId,
            newBillToSiteId
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static CountryMigationRecType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        CountryMigationRecType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("contractNumber=").append(contractNumber);
        sb.append(",contractStatus=").append(contractStatus);
        sb.append(",stcMigCompleted=").append(stcMigCompleted);
        sb.append(",customerName=").append(customerName);
        sb.append(",oldCustomerId=").append(oldCustomerId);
        sb.append(",newCustomerId=").append(newCustomerId);
        sb.append(",oldBusinessEntity=").append(oldBusinessEntity);
        sb.append(",newBusinessEntity=").append(newBusinessEntity);
        sb.append(",billToAddress=").append(billToAddress);
        sb.append(",oldBillToSiteId=").append(oldBillToSiteId);
        sb.append(",newBillToSiteId=").append(newBillToSiteId);

    }
    
    public Object clone() throws CloneNotSupportedException {
        CountryMigationRecType theClone = (CountryMigationRecType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("contractNumber=").append(contractNumber);
        hashStringBuffer.append("contractStatus=").append(contractStatus);
        hashStringBuffer.append("stcMigCompleted=").append(stcMigCompleted);
        hashStringBuffer.append("customerName=").append(customerName);
        hashStringBuffer.append("oldCustomerId=").append(oldCustomerId);
        hashStringBuffer.append("newCustomerId=").append(newCustomerId);
        hashStringBuffer.append("oldBusinessEntity=").append(oldBusinessEntity);
        hashStringBuffer.append("newBusinessEntity=").append(newBusinessEntity);
        hashStringBuffer.append("billToAddress=").append(billToAddress);
        hashStringBuffer.append("oldBillToSiteId=").append(oldBillToSiteId);
        hashStringBuffer.append("newBillToSiteId=").append(newBillToSiteId);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
