/*****************************************************************************
 * XxcssCtReqDetailsObjType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssCtReqDetailsObjType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssCtReqDetailsObjType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssCtReqDetailsObjType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssCtReqDetailsObjType) factoryClass.newInstance();
    }

public XxcssCtReqDetailsObjType() {
        requestId=MISSING_NUM;
        referenceId=MISSING_CHAR;
        action=MISSING_CHAR;
        startDate=MISSING_DATE;
        completeDate=MISSING_DATE;
        status=MISSING_CHAR;
        reason=MISSING_CHAR;
        createdBy=MISSING_NUM;
        creationDate=MISSING_DATE;
        lastUpdatedBy=MISSING_NUM;
        lastUpdatedDate=MISSING_DATE;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal requestId;
    private String referenceId;
    private String action;
    private Timestamp startDate;
    private Timestamp completeDate;
    private String status;
    private String reason;
    private BigDecimal createdBy;
    private Timestamp creationDate;
    private BigDecimal lastUpdatedBy;
    private Timestamp lastUpdatedDate;


    // getter methods
    public BigDecimal getRequestId() {
        return requestId;
    }
    public String getReferenceId() {
        return referenceId;
    }
    public String getAction() {
        return action;
    }
    public Timestamp getStartDate() {
        return startDate;
    }
    public Timestamp getCompleteDate() {
        return completeDate;
    }
    public String getStatus() {
        return status;
    }
    public String getReason() {
        return reason;
    }
    public BigDecimal getCreatedBy() {
        return createdBy;
    }
    public Timestamp getCreationDate() {
        return creationDate;
    }
    public BigDecimal getLastUpdatedBy() {
        return lastUpdatedBy;
    }
    public Timestamp getLastUpdatedDate() {
        return lastUpdatedDate;
    }

    // setter methods                       
    public void setRequestId(BigDecimal aRequestId) {
        requestId = aRequestId;
    }
    public void setReferenceId(String aReferenceId) {
        referenceId = aReferenceId;
    }
    public void setAction(String aAction) {
        action = aAction;
    }
    public void setStartDate(Timestamp aStartDate) {
        startDate = aStartDate;
    }
    public void setCompleteDate(Timestamp aCompleteDate) {
        completeDate = aCompleteDate;
    }
    public void setStatus(String aStatus) {
        status = aStatus;
    }
    public void setReason(String aReason) {
        reason = aReason;
    }
    public void setCreatedBy(BigDecimal aCreatedBy) {
        createdBy = aCreatedBy;
    }
    public void setCreationDate(Timestamp aCreationDate) {
        creationDate = aCreationDate;
    }
    public void setLastUpdatedBy(BigDecimal aLastUpdatedBy) {
        lastUpdatedBy = aLastUpdatedBy;
    }
    public void setLastUpdatedDate(Timestamp aLastUpdatedDate) {
        lastUpdatedDate = aLastUpdatedDate;
    }


    // other methods


    public XxcssCtReqDetailsObjType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        requestId=(BigDecimal)attributes[0];
        referenceId=(String)attributes[1];
        action=(String)attributes[2];
        startDate=(Timestamp)attributes[3];
        completeDate=(Timestamp)attributes[4];
        status=(String)attributes[5];
        reason=(String)attributes[6];
        createdBy=(BigDecimal)attributes[7];
        creationDate=(Timestamp)attributes[8];
        lastUpdatedBy=(BigDecimal)attributes[9];
        lastUpdatedDate=(Timestamp)attributes[10];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_CT_REQ_DETAILS_OBJ_TYPE",conn);
        Object[] attributes = new Object[]{
            requestId,
            ((referenceId==null) ? null : new CHAR(referenceId,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((action==null) ? null : new CHAR(action,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            startDate,
            completeDate,
            ((status==null) ? null : new CHAR(status,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((reason==null) ? null : new CHAR(reason,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            createdBy,
            creationDate,
            lastUpdatedBy,
            lastUpdatedDate
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssCtReqDetailsObjType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssCtReqDetailsObjType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("requestId=").append(requestId);
        sb.append(",referenceId=").append(referenceId);
        sb.append(",action=").append(action);
        sb.append(",startDate=").append(startDate);
        sb.append(",completeDate=").append(completeDate);
        sb.append(",status=").append(status);
        sb.append(",reason=").append(reason);
        sb.append(",createdBy=").append(createdBy);
        sb.append(",creationDate=").append(creationDate);
        sb.append(",lastUpdatedBy=").append(lastUpdatedBy);
        sb.append(",lastUpdatedDate=").append(lastUpdatedDate);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssCtReqDetailsObjType theClone = (XxcssCtReqDetailsObjType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("requestId=").append(requestId);
        hashStringBuffer.append("referenceId=").append(referenceId);
        hashStringBuffer.append("action=").append(action);
        hashStringBuffer.append("startDate=").append(startDate);
        hashStringBuffer.append("completeDate=").append(completeDate);
        hashStringBuffer.append("status=").append(status);
        hashStringBuffer.append("reason=").append(reason);
        hashStringBuffer.append("createdBy=").append(createdBy);
        hashStringBuffer.append("creationDate=").append(creationDate);
        hashStringBuffer.append("lastUpdatedBy=").append(lastUpdatedBy);
        hashStringBuffer.append("lastUpdatedDate=").append(lastUpdatedDate);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
