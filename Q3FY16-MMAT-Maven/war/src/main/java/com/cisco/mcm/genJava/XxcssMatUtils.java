/*****************************************************************************
 * XxcssMatUtils.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

/* Begin generated import statements */
import java.math.BigDecimal;
import java.sql.Array;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.driver.OracleResultSet;
import oracle.jdbc.driver.OracleTypes;
import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
import oracle.sql.BLOB;
import oracle.sql.STRUCT;

import com.cisco.ca.fea.daoservices.DAOServices;
import com.cisco.ca.fea.daoservices.util.ConnectionUtil;
import com.cisco.ea.dbpool.EACallableStatementFacade;
import com.cisco.mcm.bean.McmOverridesBean;
import com.cisco.mcm.dao.oracletypes.OraMatOverrideValObj;
import com.cisco.mcm.dao.oracletypes.OraMatOverrideValTbl;
 


/* End generated import statements */

/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 


@SuppressWarnings("serial")
public class XxcssMatUtils extends Object implements java.io.Serializable {

    private static XxcssMatUtils theInstance=null;
    private static final String INITIATOR = "mat_vo_initiator";
    private static final String APPROVER = "mat_vo_approver";
    private static final String OVERRIDDENVALUES = "mat_vo_values";
    private static final String CUSTOMERNAME = "mat_vo_customer_name";
    private static final String REASONCODE = "mat_vo_reason_code";
    
    private static Logger logger = Logger.getLogger(XxcssMatUtils.class);
  
    
/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */

    


/* BEGIN PROTECT_BLOCK user_public_constants */
/* END PROTECT_BLOCK user_public_constants */


/* BEGIN PROTECT_BLOCK user_static_initializers */
/* END PROTECT_BLOCK user_static_initializers */


    public static synchronized XxcssMatUtils getInstance() {
    	logger.info("Inside Get Instance method");
        if (theInstance==null) {
            theInstance = new XxcssMatUtils();
        }
        return theInstance;
    }
    
    private XxcssMatUtils() {
/* BEGIN PROTECT_BLOCK user_private_constructor */
/* END PROTECT_BLOCK user_private_constructor */

    }
    

    
    /**
     * @param conn
     * @param list
     * @param dummy
     * @return
     * @throws SQLException
     */
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssMatConReqstType dummy)
        throws SQLException {
        com.cisco.mcm.genJava.XxcssMatConReqstType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_MAT_CON_REQST_TAB_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssMatConReqstType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }

    /**
     * @param conn
     * @param list
     * @param dummy
     * @return
     * @throws SQLException
     */
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssSsfUpldParmObjType dummy)
        throws SQLException {
        com.cisco.mcm.genJava.XxcssSsfUpldParmObjType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_SSF_UPLD_PARM_TAB_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssSsfUpldParmObjType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }

    /**
     * @param conn
     * @param list
     * @param dummy
     * @return
     * @throws SQLException
     */
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssMatConInfoType dummy)
        throws SQLException {
        com.cisco.mcm.genJava.XxcssMatConInfoType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_MAT_CON_INFO_TAB_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssMatConInfoType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }

    /**
     * @param conn
     * @param list
     * @param dummy
     * @return
     * @throws SQLException
     */
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssQpLineType dummy)
        throws SQLException {
        com.cisco.mcm.genJava.XxcssQpLineType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_QP_LINE_TBL_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssQpLineType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }

    /**
     * @param conn
     * @param list
     * @param dummy
     * @return
     * @throws SQLException
     */
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssQpHeaderType dummy)
        throws SQLException {
        com.cisco.mcm.genJava.XxcssQpHeaderType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_QP_HEADER_TBL_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssQpHeaderType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }

    /**
     * @param conn
     * @param list
     * @param dummy
     * @return
     * @throws SQLException
     */
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssMatProdInfoType dummy)
        throws SQLException {
        com.cisco.mcm.genJava.XxcssMatProdInfoType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssMatProdInfoType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }
    /**
     * @param conn
     * @param list
     * @param array
     * @param dummy
     * @return
     * @throws SQLException
     * @throws InstantiationException
     * @throws IllegalAccessException
     */
    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssIlErrorMessageObj dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssIlErrorMessageObj element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssIlErrorMessageObj.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssQpAdjustmentsType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssQpAdjustmentsType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssQpAdjustmentsType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssMatSiteInfoType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssMatSiteInfoType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssMatSiteInfoType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssMatConReplyType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssMatConReplyType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssMatConReplyType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }


    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssMatConInfoType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssMatConInfoType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssMatConInfoType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssQpLineType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssQpLineType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssQpLineType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssQpHeaderType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssQpHeaderType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssQpHeaderType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssMatProdInfoType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssMatProdInfoType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssMatProdInfoType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

       

    public void writeLog(
        DAOServices services,
        String message)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.write_log(:1); end;");
            stmt.setString(1,message);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void traceMsg(
        DAOServices services,
        String traceLevel,
        String callingProc,
        String traceMsg,
        String traceType,
        BigDecimal traceId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.trace_msg(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,traceLevel);
            stmt.setString(2,callingProc);
            stmt.setString(3,traceMsg);
            stmt.setString(4,traceType);
            stmt.setBigDecimal(5,traceId);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void setTraceLevel(
        DAOServices services,
        String traceLevel)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.set_trace_level(:1); end;");
            stmt.setString(1,traceLevel);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getTraceLevel(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_trace_level; end;");
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void setAppsinfo(
        DAOServices services,
        String userName,
        String responsibilityKey,
        String applicationShortName,
        String traceLevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.set_appsinfo(:1,:2,:3,:4,:5,:6); end;");
            stmt.setString(1,userName);
            stmt.setString(2,responsibilityKey);
            stmt.setString(3,applicationShortName);
            stmt.setString(4,traceLevel);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            errorCode[0]=(String)stmt.getString(5);
            errorMsg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void submitcmjob(
        DAOServices services,
        String cmUserName,
        String cmResponsibilityKey,
        String cmApplicationShortName,
        String cmPgmName,
        String cmReqDesc,
        java.util.List parmTab,
        BigDecimal[] cmRequestId,
        String traceLevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.submitcmjob(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10); end;");
            stmt.setString(1,cmUserName);
            stmt.setString(2,cmResponsibilityKey);
            stmt.setString(3,cmApplicationShortName);
            stmt.setString(4,cmPgmName);
            stmt.setString(5,cmReqDesc);
            stmt.setArray(6,buildOracleArrayFromList(services.getNativeConnection(conn),parmTab,(com.cisco.mcm.genJava.XxcssSsfUpldParmObjType)null));
            stmt.setBigDecimal(7,cmRequestId[0]);
            stmt.registerOutParameter(7, OracleTypes.NUMBER);
            stmt.setString(8,traceLevel);
            stmt.registerOutParameter(9, OracleTypes.VARCHAR);
            stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.execute();
            cmRequestId[0]=(BigDecimal)stmt.getBigDecimal(7);
            errorCode[0]=(String)stmt.getString(9);
            errorMsg[0]=(String)stmt.getString(10);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void upldSubmitconcmgr(
        DAOServices services,
        BigDecimal upldRequestId,
        String traceLevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.upld_submitconcmgr(:1,:2,:3,:4); end;");
            stmt.setBigDecimal(1,upldRequestId);
            stmt.setString(2,traceLevel);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.execute();
            errorCode[0]=(String)stmt.getString(3);
            errorMsg[0]=(String)stmt.getString(4);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void upldSendemail(
        DAOServices services,
        String emailTo,
        String emailCc,
        String emailBcc,
        String emailFrom,
        String emailSubject,
        String emailSalutation,
        String emailBody,
        String emailAttachment,
        String traceLevel,
        BLOB blobAttach,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.upld_sendemail(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12); end;");
            stmt.setString(1,emailTo);
            stmt.setString(2,emailCc);
            stmt.setString(3,emailBcc);
            stmt.setString(4,emailFrom);
            stmt.setString(5,emailSubject);
            stmt.setString(6,emailSalutation);
            stmt.setString(7,emailBody);
            stmt.setString(8,emailAttachment);
            stmt.setString(9,traceLevel);
            stmt.setBlob(10,blobAttach);
            stmt.registerOutParameter(11, OracleTypes.VARCHAR);
            stmt.registerOutParameter(12, OracleTypes.VARCHAR);
            stmt.execute();
            errorCode[0]=(String)stmt.getString(11);
            errorMsg[0]=(String)stmt.getString(12);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getmatexcellineslimit(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getmatexcellineslimit; end;");
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getmatqueuethreshold(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getmatqueuethreshold; end;");
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getmatcontracttermdays(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getmatcontracttermdays; end;");
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getmaterrorthreshold(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getmaterrorthreshold; end;");
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getprofilevalue(
        DAOServices services,
        String profileName)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getprofilevalue(:2); end;");
            stmt.setString(2,profileName);
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isvalidreasoncode(
        DAOServices services,
        String reasonCode,
        String matGroup)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.isvalidreasoncode(:2,:3); end;");
            stmt.setString(2,reasonCode);
            stmt.setString(3,matGroup);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void isshellcontract(
        DAOServices services,
        String inputType,
        String inputValue,
        String[] contractIsShell)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.isshellcontract(:1,:2,:3); end;");
            stmt.setString(1,inputType);
            stmt.setString(2,inputValue);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.execute();
            contractIsShell[0]=(String)stmt.getString(3);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getinfocontracts(
        DAOServices services,
        java.util.List contracttab,
        java.util.List[] contractinfotab,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getinfocontracts(:1,:2,:3,:4,:5); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),contracttab,(com.cisco.mcm.genJava.XxcssMatConReqstType)null));
            stmt.registerOutParameter(2, OracleTypes.ARRAY,"APPS.XXCSS_MAT_CON_REPLY_TAB_TYPE");
            stmt.setString(3,tracelevel);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY contractinfotabArray=(ARRAY)stmt.getArray(2);
            contractinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),contractinfotab[0],contractinfotabArray,(com.cisco.mcm.genJava.XxcssMatConReplyType)null);
            errorCode[0]=(String)stmt.getString(4);
            errorMsg[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void checkuseraccesstocontract(
        DAOServices services,
        String userid,
        BigDecimal chrid,
        String[] accessAllowed,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.checkuseraccesstocontract(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,userid);
            stmt.setBigDecimal(2,chrid);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            accessAllowed[0]=(String)stmt.getString(3);
            errorCode[0]=(String)stmt.getString(4);
            errorMsg[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isparentchildstandalone(
        DAOServices services,
        BigDecimal instanceId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.isparentchildstandalone(:2); end;");
            stmt.setBigDecimal(2,instanceId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void comparecountrypricelists(
        DAOServices services,
        String country1,
        String country2,
        BigDecimal[] pricelist1,
        BigDecimal[] pricelist2,
        String[] matchflag,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.comparecountrypricelists(:1,:2,:3,:4,:5,:6,:7,:8); end;");
            stmt.setString(1,country1);
            stmt.setString(2,country2);
            stmt.registerOutParameter(3, OracleTypes.NUMBER);
            stmt.registerOutParameter(4, OracleTypes.NUMBER);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.setString(6,tracelevel);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.execute();
            pricelist1[0]=(BigDecimal)stmt.getBigDecimal(3);
            pricelist2[0]=(BigDecimal)stmt.getBigDecimal(4);
            matchflag[0]=(String)stmt.getString(5);
            errorCode[0]=(String)stmt.getString(7);
            errorMsg[0]=(String)stmt.getString(8);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void geteosdates(
        DAOServices services,
        BigDecimal instanceid,
        String[] eosdateexists,
        Timestamp[] eosdate,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.geteosdates(:1,:2,:3,:4,:5,:6); end;");
            stmt.setBigDecimal(1,instanceid);
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.registerOutParameter(3, OracleTypes.TIMESTAMP);
            stmt.setString(4,tracelevel);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            eosdateexists[0]=(String)stmt.getString(2);
            eosdate[0]=(Timestamp)stmt.getTimestamp(3);
            errorCode[0]=(String)stmt.getString(5);
            errorMsg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public Timestamp getEos(
        DAOServices services,
        BigDecimal instanceId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_eos(:2); end;");
            stmt.setBigDecimal(2,instanceId);
            stmt.registerOutParameter(1, OracleTypes.TIMESTAMP);
            stmt.execute();
            Timestamp retval=null;
            retval=(Timestamp)stmt.getTimestamp(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getLocation(
        DAOServices services,
        String installLocationTypeCode,
        BigDecimal installLocationId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_location(:2,:3); end;");
            stmt.setString(2,installLocationTypeCode);
            stmt.setBigDecimal(3,installLocationId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getProductFamily(
        DAOServices services,
        String productName)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_product_family(:2); end;");
            stmt.setString(2,productName);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getProductFamily(
        DAOServices services,
        BigDecimal itemId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_product_family(:2); end;");
            stmt.setBigDecimal(2,itemId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getinfoprodserialnumber(
        DAOServices services,
        String pn,
        String sn,
        String siteLoc,
        String matchprodfamily,
        String pntomatchpf,
        String getconinfoflag,
        java.util.List[] contractinfotab,
        java.util.List[] prodinfotab,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getinfoprodserialnumber(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11); end;");
            stmt.setString(1,pn);
            stmt.setString(2,sn);
            stmt.setString(3,siteLoc);
            stmt.setString(4,matchprodfamily);
            stmt.setString(5,pntomatchpf);
            stmt.setString(6,getconinfoflag);
            stmt.registerOutParameter(7, OracleTypes.ARRAY,"APPS.XXCSS_MAT_CON_INFO_TAB_TYPE");
            stmt.registerOutParameter(8, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.setString(9,tracelevel);
            stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.registerOutParameter(11, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY contractinfotabArray=(ARRAY)stmt.getArray(7);
            contractinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),contractinfotab[0],contractinfotabArray,(com.cisco.mcm.genJava.XxcssMatConInfoType)null);
            ARRAY prodinfotabArray=(ARRAY)stmt.getArray(8);
            prodinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodinfotab[0],prodinfotabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            errorCode[0]=(String)stmt.getString(10);
            errorMsg[0]=(String)stmt.getString(11);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getinfoinstanceid(
        DAOServices services,
        BigDecimal instanceId,
        String siteLoc,
        String getconinfoflag,
        java.util.List[] contractinfotab,
        java.util.List[] prodinfotab,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getinfoinstanceid(:1,:2,:3,:4,:5,:6,:7,:8); end;");
            stmt.setBigDecimal(1,instanceId);
            stmt.setString(2,siteLoc);
            stmt.setString(3,getconinfoflag);
            stmt.registerOutParameter(4, OracleTypes.ARRAY,"APPS.XXCSS_MAT_CON_INFO_TAB_TYPE");
            stmt.registerOutParameter(5, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.setString(6,tracelevel);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY contractinfotabArray=(ARRAY)stmt.getArray(4);
            contractinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),contractinfotab[0],contractinfotabArray,(com.cisco.mcm.genJava.XxcssMatConInfoType)null);
            ARRAY prodinfotabArray=(ARRAY)stmt.getArray(5);
            prodinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodinfotab[0],prodinfotabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            errorCode[0]=(String)stmt.getString(7);
            errorMsg[0]=(String)stmt.getString(8);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isinservicetypeexception(
        DAOServices services,
        String serviceType)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.isinservicetypeexception(:2); end;");
            stmt.setString(2,serviceType);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String arecontractandlocationlinked(
        DAOServices services,
        String contractNumber,
        String location)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.arecontractandlocationlinked(:2,:3); end;");
            stmt.setString(2,contractNumber);
            stmt.setString(3,location);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void spVerifyService(
        DAOServices services,
        String country,
        String city,
        String zip,
        String servType,
        String[] servAvail,
        String[] ossType,
        String[] otherserv,
        String[] notes,
        String[] cityZipNotFound)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.sp_verify_service(:1,:2,:3,:4,:5,:6,:7,:8,:9); end;");
            stmt.setString(1,country);
            stmt.setString(2,city);
            stmt.setString(3,zip);
            stmt.setString(4,servType);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.registerOutParameter(9, OracleTypes.VARCHAR);
            stmt.execute();
            servAvail[0]=(String)stmt.getString(5);
            ossType[0]=(String)stmt.getString(6);
            otherserv[0]=(String)stmt.getString(7);
            notes[0]=(String)stmt.getString(8);
            cityZipNotFound[0]=(String)stmt.getString(9);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getserialnumber(
        DAOServices services,
        BigDecimal cleId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getserialnumber(:2); end;");
            stmt.setBigDecimal(2,cleId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getitemname(
        DAOServices services,
        BigDecimal cleId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getitemname(:2); end;");
            stmt.setBigDecimal(2,cleId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getSccLandingPage(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_scc_landing_page; end;");
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getrequestinguserid(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getrequestinguserid; end;");
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isuseridinlist(
        DAOServices services,
        String ccoUserId,
        String lookupList)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.isuseridinlist(:2,:3); end;");
            stmt.setString(2,ccoUserId);
            stmt.setString(3,lookupList);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isColumnNull(
        DAOServices services,
        String columnName,
        String columnValue)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_column_null(:2,:3); end;");
            stmt.setString(2,columnName);
            stmt.setString(3,columnValue);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isContractStatusValid(
        DAOServices services,
        String contractStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_contract_status_valid(:2); end;");
            stmt.setString(2,contractStatus);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isServiceStatusValid(
        DAOServices services,
        String serviceStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_service_status_valid(:2); end;");
            stmt.setString(2,serviceStatus);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void validservicelinecount(
        DAOServices services,
        BigDecimal servlinecount,
        String contractNumber,
        String srcTrgFlag,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.validservicelinecount(:1,:2,:3,:4,:5,:6); end;");
            stmt.setBigDecimal(1,servlinecount);
            stmt.setString(2,contractNumber);
            stmt.setString(3,srcTrgFlag);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(4);
            errorCode[0]=(String)stmt.getString(5);
            errorMssg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isContractSiteValid(
        DAOServices services,
        String contractNumber,
        String siteLocation)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_contract_site_valid(:2,:3); end;");
            stmt.setString(2,contractNumber);
            stmt.setString(3,siteLocation);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isSiteStatusValid(
        DAOServices services,
        String siteLocation)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_site_status_valid(:2); end;");
            stmt.setString(2,siteLocation);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isSrcTrgContractDiff(
        DAOServices services,
        String srcConNum,
        String trgConNum)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_src_trg_contract_diff(:2,:3); end;");
            stmt.setString(2,srcConNum);
            stmt.setString(3,trgConNum);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isSrcTrgSiteDiff(
        DAOServices services,
        String srcSite,
        String trgSite)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_src_trg_site_diff(:2,:3); end;");
            stmt.setString(2,srcSite);
            stmt.setString(3,trgSite);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void validsrlnumproditem(
        DAOServices services,
        java.util.List prodinfotab,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.validsrlnumproditem(:1,:2,:3,:4); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(2);
            errorCode[0]=(String)stmt.getString(3);
            errorMssg[0]=(String)stmt.getString(4);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void validuniquecontract(
        DAOServices services,
        java.util.List prodinfotab,
        java.util.List contractinfotab,
        String contractId,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.validuniquecontract(:1,:2,:3,:4,:5,:6); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.setArray(2,buildOracleArrayFromList(services.getNativeConnection(conn),contractinfotab,(com.cisco.mcm.genJava.XxcssMatConInfoType)null));
            stmt.setString(3,contractId);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(4);
            errorCode[0]=(String)stmt.getString(5);
            errorMssg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void validchildinstance(
        DAOServices services,
        java.util.List[] prodinfotab,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.validchildinstance(:1,:2,:3,:4); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab[0],(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(1, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY prodinfotabArray=(ARRAY)stmt.getArray(1);
            prodinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodinfotab[0],prodinfotabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            returnStatus[0]=(String)stmt.getString(2);
            errorCode[0]=(String)stmt.getString(3);
            errorMssg[0]=(String)stmt.getString(4);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isSerialNumberValid(
        DAOServices services,
        java.util.List prodinfotab)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_serial_number_valid(:2); end;");
            stmt.setArray(2,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isProductItemValid(
        DAOServices services,
        java.util.List prodinfotab)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_product_item_valid(:2); end;");
            stmt.setArray(2,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void validinstance(
        DAOServices services,
        java.util.List prodinfotab,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.validinstance(:1,:2,:3,:4); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(2);
            errorCode[0]=(String)stmt.getString(3);
            errorMssg[0]=(String)stmt.getString(4);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void procGetSiteInfo(
        DAOServices services,
        String addrType,
        String siteId,
        java.util.List[] siteInfoTab,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.proc_get_site_info(:1,:2,:3,:4,:5,:6); end;");
            stmt.setString(1,addrType);
            stmt.setString(2,siteId);
            stmt.registerOutParameter(3, OracleTypes.ARRAY,"APPS.XXCSS_MAT_SITE_INFO_TAB_TYPE");
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY siteInfoTabArray=(ARRAY)stmt.getArray(3);
            siteInfoTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),siteInfoTab[0],siteInfoTabArray,(com.cisco.mcm.genJava.XxcssMatSiteInfoType)null);
            returnStatus[0]=(String)stmt.getString(4);
            errorCode[0]=(String)stmt.getString(5);
            errorMssg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isReasonCodeValid(
        DAOServices services,
        String reasonCode)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_reason_code_valid(:2); end;");
            stmt.setString(2,reasonCode);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isContractAutoExpire(
        DAOServices services,
        String contractNumber)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_contract_auto_expire(:2); end;");
            stmt.setString(2,contractNumber);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isShellContract(
        DAOServices services,
        String pConNumber)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_shell_contract(:2); end;");
            stmt.setString(2,pConNumber);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isEvrgreenService(
        DAOServices services,
        String svcLevel)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_evrgreen_service(:2); end;");
            stmt.setString(2,svcLevel);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String coveredProductExists(
        DAOServices services,
        String moveLevel,
        String moveValue)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.covered_product_exists(:2,:3); end;");
            stmt.setString(2,moveLevel);
            stmt.setString(3,moveValue);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void procInstanceUncovered(
        DAOServices services,
        java.util.List[] prodInfoTab,
        java.util.List contractinfotab,
        String contractId,
        String[] termAllowedFlag,
        String[] errorMssg,
        String[] errorCode)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.proc_instance_uncovered(:1,:2,:3,:4,:5,:6); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),prodInfoTab[0],(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(1, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.setArray(2,buildOracleArrayFromList(services.getNativeConnection(conn),contractinfotab,(com.cisco.mcm.genJava.XxcssMatConInfoType)null));
            stmt.setString(3,contractId);
            stmt.setString(4,termAllowedFlag[0]);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY prodInfoTabArray=(ARRAY)stmt.getArray(1);
            prodInfoTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodInfoTab[0],prodInfoTabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            termAllowedFlag[0]=(String)stmt.getString(4);
            errorMssg[0]=(String)stmt.getString(5);
            errorCode[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void procTermdateafterline(
        DAOServices services,
        String serviceLevel,
        String prodStatus,
        Timestamp terminationDate,
        Timestamp productEndDate,
        String[] returnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.proc_termdateafterline(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,serviceLevel);
            stmt.setString(2,prodStatus);
            stmt.setTimestamp(3,terminationDate);
            stmt.setTimestamp(4,productEndDate);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void procTermdateafter(
        DAOServices services,
        Timestamp terminationDate,
        String[] returnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.proc_termdateafter(:1,:2); end;");
            stmt.setTimestamp(1,terminationDate);
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(2);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void procTermdatelinestart(
        DAOServices services,
        Timestamp terminationDate,
        Timestamp prodStartDate,
        String[] returnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.proc_termdatelinestart(:1,:2,:3); end;");
            stmt.setTimestamp(1,terminationDate);
            stmt.setTimestamp(2,prodStartDate);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(3);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getPartySite(
        DAOServices services,
        String siteId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_party_site(:2); end;");
            stmt.setString(2,siteId);
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getCountry(
        DAOServices services,
        BigDecimal siteId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_country(:2); end;");
            stmt.setBigDecimal(2,siteId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getErrorMsg(
        DAOServices services,
        String appShortname,
        String errorMsgName,
        String token1,
        String token1Val,
        String token2,
        String token2Val,
        String token3,
        String token3Val)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.get_error_msg(:2,:3,:4,:5,:6,:7,:8,:9); end;");
            stmt.setString(2,appShortname);
            stmt.setString(3,errorMsgName);
            stmt.setString(4,token1);
            stmt.setString(5,token1Val);
            stmt.setString(6,token2);
            stmt.setString(7,token2Val);
            stmt.setString(8,token3);
            stmt.setString(9,token3Val);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isConInMoveExclList(
        DAOServices services,
        String contractNumber)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_con_in_move_excl_list(:2); end;");
            stmt.setString(2,contractNumber);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isSpecialContract(
        DAOServices services,
        String contractPriceType)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_special_contract(:2); end;");
            stmt.setString(2,contractPriceType);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isConBilltoCib(
        DAOServices services,
        String conBilltoLoc)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_con_billto_cib(:2); end;");
            stmt.setString(2,conBilltoLoc);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isSiteUnknownMig(
        DAOServices services,
        String siteId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_site_unknown_mig(:2); end;");
            stmt.setString(2,siteId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isValidNewCon(
        DAOServices services,
        String contractNumber)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_valid_new_con(:2); end;");
            stmt.setString(2,contractNumber);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isValueSame(
        DAOServices services,
        String value1,
        String value2)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_value_same(:2,:3); end;");
            stmt.setString(2,value1);
            stmt.setString(3,value2);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String issmartsparesService(
        DAOServices services,
        String serviceLevel)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.issmartspares_service(:2); end;");
            stmt.setString(2,serviceLevel);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void procGetConSvcLvlType(
        DAOServices services,
        BigDecimal conInfoTabCnt,
        String conSvcLevel,
        String[] conSvcLvlType,
        String[] tranAllowedFlag,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.proc_get_con_svc_lvl_type(:1,:2,:3,:4,:5,:6); end;");
            stmt.setBigDecimal(1,conInfoTabCnt);
            stmt.setString(2,conSvcLevel);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            conSvcLvlType[0]=(String)stmt.getString(3);
            tranAllowedFlag[0]=(String)stmt.getString(4);
            errorCode[0]=(String)stmt.getString(5);
            errorMsg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isConStatusValidForAdd(
        DAOServices services,
        String contractStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_con_status_valid_for_add(:2); end;");
            stmt.setString(2,contractStatus);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isValidSeviceLineDates(
        DAOServices services,
        Timestamp prodStartDate,
        Timestamp svcStartDate)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_valid_sevice_line_dates(:2,:3); end;");
            stmt.setTimestamp(2,prodStartDate);
            stmt.setTimestamp(3,svcStartDate);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isInstStatusValid(
        DAOServices services,
        String instanceStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_inst_status_valid(:2); end;");
            stmt.setString(2,instanceStatus);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String isInputEndDateValid(
        DAOServices services,
        Timestamp startDate,
        Timestamp endDate)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.is_input_end_date_valid(:2,:3); end;");
            stmt.setTimestamp(2,startDate);
            stmt.setTimestamp(3,endDate);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    @SuppressWarnings("deprecation")
	public HashMap getOverridableBizvals(
        DAOServices services,
        String sourceSystem,
        String ccoUserId,
        String[] returnStatus,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
       CallableStatement stmt=null;
      
       // EACallableStatementFacade stmt = null;
        HashMap overRideMap = null;
        ArrayList transcationList = null;
        String transcationType = "";
    
        try {
        	logger.info("Inside getOverrideableBizVals");
            conn = services.borrowConnection();
            logger.info("Got the Connection");
            //stmt = (EACallableStatementFacade) conn.prepareCall("begin APPS.xxcss_mat_utils.get_overridable_bizvals(:1,:2,:3,:4,:5); end;");
            stmt =  conn.prepareCall("begin APPS.xxcss_mat_utils.get_overridable_bizvals(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,sourceSystem);
            stmt.setString(2,ccoUserId);
            stmt.registerOutParameter(3, OraMatOverrideValTbl._SQL_TYPECODE,
		    "APPS.XXCSS_MAT_VAL_OVERIDE_TAB_TYPE");
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            logger.info("Statement Executed");
            ARRAY rs1 = (ARRAY)stmt.getObject(3);
           
            //ARRAY overridableBizvalsArray=(ARRAY)stmt.getArray(3);
            //overridableBizvals[0]=buildListFromOracleArray(services.getNativeConnection(conn),overridableBizvals[0],overridableBizvalsArray,(com.cisco.mcm.genJava.XxcssMatValOverideType)null);
            returnStatus[0]=(String)stmt.getString(4);
            errorMsg[0]=(String)stmt.getString(5);
            logger.info("Return Status[0] = " + returnStatus[0] + " errorMsg[0]" + errorMsg[0]);
            if ((returnStatus [0]!= null) && (!returnStatus[0].equalsIgnoreCase("E"))) {
		//OraMatOverrideValTbl oraOverrideValTbl = (OraMatOverrideValTbl) ((OracleResultSet) rs).getCustomDatum(3, OraMatOverrideValTbl.getFactory());
            	Object[] oraOverrideValTbl = (Object[]) rs1.getArray();
            	logger.info("Outside Outer If");
            	
            	logger.info("Outside Outer If : " + oraOverrideValTbl.length );
		if (oraOverrideValTbl != null) {
			logger.info("Outside Inner If "  );
		   // OraMatOverrideValObj[] oraMatOverrideValObjs = (OraMatOverrideValObj[]) oraOverrideValTbl.
			//Object[] oraMatOverrideValObjs =  (Object[]) oraOverrideValTbl.getArray();
		   // if (oraMatOverrideValObjs != null && oraMatOverrideValObjs.length > 0)  {
			overRideMap = new HashMap();
			//logger.info("Inside inner If : " + oraMatOverrideValObjs.length );

			for (int i = 0; i < oraOverrideValTbl.length; i++) {
			    STRUCT oraMatOverrideValObj = (STRUCT) oraOverrideValTbl[i];
			    if (oraMatOverrideValObj != null) {
				if (i == 0) {

				    transcationList = new ArrayList();
				    transcationType = (String)oraMatOverrideValObj
					    .getAttributes()[0];

				    McmOverridesBean ovb = new McmOverridesBean(
					   (String) oraMatOverrideValObj.getAttributes()[1],
					   (String) oraMatOverrideValObj
						    .getAttributes()[2],
					    "enabled");
				    transcationList.add(ovb);
				} else {
				    if (transcationType
					    .equalsIgnoreCase((String)oraMatOverrideValObj
							    .getAttributes()[0])) {
					McmOverridesBean ovb = new McmOverridesBean(
							(String) oraMatOverrideValObj.getAttributes()[1],
							   (String) oraMatOverrideValObj
								    .getAttributes()[2],
						"enabled");
					transcationList.add(ovb);

					if (i == (oraOverrideValTbl.length) - 1) {
					    overRideMap.put(transcationType,
						    transcationList);
					}
				    } else {

					if ((transcationType
						.equals("MAT_MOVE_C2C_AT_SITE"))
						|| (transcationType
							.equals("MAT_MOVE_C2C_AT_PRODUCT"))
						|| (transcationType
							.equals("MAT_MOVE_C2C_AT_CONTRACT"))) {
					    overRideMap.put(transcationType,
						    transcationList);
					    McmOverridesBean ovb2 = new McmOverridesBean(
						    "SAM",
						    "SAM Check Override",
						    "disabled ");
					    transcationList.add(ovb2);
					}
					overRideMap.put(transcationType,
						transcationList);
					transcationType = (String)oraMatOverrideValObj
				    .getAttributes()[0];
					transcationList = new ArrayList();
					McmOverridesBean ovb = new McmOverridesBean(
							(String) oraMatOverrideValObj.getAttributes()[1],
							   (String) oraMatOverrideValObj
								    .getAttributes()[2],
						"enabled");
					transcationList.add(ovb);
				    }
				}

			    }
			}
		    }
		
	    } else {

		
	    }

            
            
            

        } 
        catch (Exception e)
        {
        	logger.error("Exception : " , e);
        	//System.out.println();
        }
        
        finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
        return overRideMap;
    }


    public String anyValsOverridenByUi(
        DAOServices services,
        String sourceSystem,
        BigDecimal requestId,
        String ccoUserId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.any_vals_overriden_by_ui(:2,:3,:4); end;");
            stmt.setString(2,sourceSystem);
            stmt.setBigDecimal(3,requestId);
            stmt.setString(4,ccoUserId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getinfoprodserialnumberue(
        DAOServices services,
        String pn,
        String sn,
        String siteLoc,
        String matchprodfamily,
        String pntomatchpf,
        String getconinfoflag,
        java.util.List[] contractinfotab,
        java.util.List[] prodinfotab,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getinfoprodserialnumberue(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11); end;");
            stmt.setString(1,pn);
            stmt.setString(2,sn);
            stmt.setString(3,siteLoc);
            stmt.setString(4,matchprodfamily);
            stmt.setString(5,pntomatchpf);
            stmt.setString(6,getconinfoflag);
            stmt.registerOutParameter(7, OracleTypes.ARRAY,"APPS.XXCSS_MAT_CON_INFO_TAB_TYPE");
            stmt.registerOutParameter(8, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.setString(9,tracelevel);
            stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.registerOutParameter(11, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY contractinfotabArray=(ARRAY)stmt.getArray(7);
            contractinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),contractinfotab[0],contractinfotabArray,(com.cisco.mcm.genJava.XxcssMatConInfoType)null);
            ARRAY prodinfotabArray=(ARRAY)stmt.getArray(8);
            prodinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodinfotab[0],prodinfotabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            errorCode[0]=(String)stmt.getString(10);
            errorMsg[0]=(String)stmt.getString(11);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    @SuppressWarnings("unchecked")
	public HashMap uiOverrideDataVal(
        DAOServices services,
        String[] errormsg,
        int upldrequestid,
        String[] approver,
        String[] custName,
        String[] reasonCode,
        String[] initiator,
        String[] returnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        //EACallableStatementFacade stmt = null;
       HashMap overRiddenMap= null; 
       List userOverRiddenList = null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin APPS.xxcss_mat_utils.ui_override_data_val(:1,:2,:3,:4,:5,:6,:7,:8); end;");
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.setInt(2,upldrequestid);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.registerOutParameter(7, OracleTypes.ARRAY,"APPS.XXCSS_MAT_VAL_OVERIDE_TAB_TYPE");
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.execute();
            errormsg[0]=(String)stmt.getString(1);
            approver[0]=(String)stmt.getString(3);
            custName[0]=(String)stmt.getString(4);
            reasonCode[0]=(String)stmt.getString(5);
            initiator[0]=(String)stmt.getString(6);
            ARRAY overrideBizvalsTabArray=(ARRAY)stmt.getArray(7);
           // overrideBizvalsTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),overrideBizvalsTab[0],overrideBizvalsTabArray,(com.cisco.mcm.genJava.XxcssMatValOverideType)null);
            returnStatus[0]=(String)stmt.getString(8);
            
            
            //
            
            if (!returnStatus[0].equalsIgnoreCase("E")) {
		Object[] oraOverrideValTbl = (Object[]) overrideBizvalsTabArray.getArray();
			
		if (oraOverrideValTbl != null) {
		    overRiddenMap = new HashMap();

		    overRiddenMap.put(APPROVER, approver[0]);
		    overRiddenMap.put(CUSTOMERNAME, custName[0]);
		    overRiddenMap.put(REASONCODE, reasonCode[0]);
			 overRiddenMap.put(INITIATOR, initiator[0]);
		    userOverRiddenList = new ArrayList(); // will store the
		    //OraMatOverrideValObj[] oraMatOverrideValObjs = oraOverrideValTbl.getArray();
		    //if (oraOverrideValTbl != null && oraOverrideValTbl.length > 0) {
			for (int i = 0; i < oraOverrideValTbl.length; i++) {
				STRUCT oraMatOverrideValObjs = (STRUCT)oraOverrideValTbl[i];
			    McmOverridesBean ovb = new McmOverridesBean(
				    (String) oraMatOverrideValObjs.getAttributes()[1],
					  
				    (String) oraMatOverrideValObjs
					    .getAttributes()[2]);
			    userOverRiddenList.add(ovb);
			}
			overRiddenMap.put(OVERRIDDENVALUES, userOverRiddenList);
		    }
		}
	    } 

            
            //

         finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
        return overRiddenMap;
    }


    public void getinfoinstanceidue(
        DAOServices services,
        BigDecimal instanceId,
        String siteLoc,
        String getconinfoflag,
        java.util.List[] contractinfotab,
        java.util.List[] prodinfotab,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getinfoinstanceidue(:1,:2,:3,:4,:5,:6,:7,:8); end;");
            stmt.setBigDecimal(1,instanceId);
            stmt.setString(2,siteLoc);
            stmt.setString(3,getconinfoflag);
            stmt.registerOutParameter(4, OracleTypes.ARRAY,"APPS.XXCSS_MAT_CON_INFO_TAB_TYPE");
            stmt.registerOutParameter(5, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.setString(6,tracelevel);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY contractinfotabArray=(ARRAY)stmt.getArray(4);
            contractinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),contractinfotab[0],contractinfotabArray,(com.cisco.mcm.genJava.XxcssMatConInfoType)null);
            ARRAY prodinfotabArray=(ARRAY)stmt.getArray(5);
            prodinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodinfotab[0],prodinfotabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            errorCode[0]=(String)stmt.getString(7);
            errorMsg[0]=(String)stmt.getString(8);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void validinstanceid(
        DAOServices services,
        java.util.List prodinfotab,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMssg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.validinstanceid(:1,:2,:3,:4); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),prodinfotab,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null));
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(2);
            errorCode[0]=(String)stmt.getString(3);
            errorMssg[0]=(String)stmt.getString(4);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getqpprice(
        DAOServices services,
        com.cisco.mcm.genJava.XxcssIlServiceObj serviceObj,
        String tracelevel,
        java.util.List[] headerTab,
        java.util.List[] lineTab,
        java.util.List[] adjustmentTab,
        BigDecimal[] serviceCost,
        java.util.List[] messageTable,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getqpprice(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10); end;");
            stmt.setObject(1,(serviceObj==null) ? null : serviceObj.asStruct(services.getNativeConnection(conn)));
            stmt.setString(2,tracelevel);
            stmt.setArray(3,buildOracleArrayFromList(services.getNativeConnection(conn),headerTab[0],(com.cisco.mcm.genJava.XxcssQpHeaderType)null));
            stmt.registerOutParameter(3, OracleTypes.ARRAY,"APPS.XXCSS_QP_HEADER_TBL_TYPE");
            stmt.setArray(4,buildOracleArrayFromList(services.getNativeConnection(conn),lineTab[0],(com.cisco.mcm.genJava.XxcssQpLineType)null));
            stmt.registerOutParameter(4, OracleTypes.ARRAY,"APPS.XXCSS_QP_LINE_TBL_TYPE");
            stmt.registerOutParameter(5, OracleTypes.ARRAY,"APPS.XXCSS_QP_ADJUSTMENTS_TBL_TYPE");
            stmt.registerOutParameter(6, OracleTypes.NUMBER);
            stmt.registerOutParameter(7, OracleTypes.ARRAY,"APPS.XXCSS_IL_ERROR_MSG_TAB_TYPE");
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.registerOutParameter(9, OracleTypes.VARCHAR);
            stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY headerTabArray=(ARRAY)stmt.getArray(3);
            headerTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),headerTab[0],headerTabArray,(com.cisco.mcm.genJava.XxcssQpHeaderType)null);
            ARRAY lineTabArray=(ARRAY)stmt.getArray(4);
            lineTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),lineTab[0],lineTabArray,(com.cisco.mcm.genJava.XxcssQpLineType)null);
            ARRAY adjustmentTabArray=(ARRAY)stmt.getArray(5);
            adjustmentTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),adjustmentTab[0],adjustmentTabArray,(com.cisco.mcm.genJava.XxcssQpAdjustmentsType)null);
            serviceCost[0]=(BigDecimal)stmt.getBigDecimal(6);
            ARRAY messageTableArray=(ARRAY)stmt.getArray(7);
            messageTable[0]=buildListFromOracleArray(services.getNativeConnection(conn),messageTable[0],messageTableArray,(com.cisco.mcm.genJava.XxcssIlErrorMessageObj)null);
            returnStatus[0]=(String)stmt.getString(8);
            errorCode[0]=(String)stmt.getString(9);
            errorMsg[0]=(String)stmt.getString(10);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void callgetqppriceinbatch(
        DAOServices services,
        com.cisco.mcm.genJava.XxcssIlServiceObj serviceObj,
        String tracelevel,
        java.util.List[] headerTab,
        java.util.List lineTab,
        BigDecimal[] serviceCost,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.callgetqppriceinbatch(:1,:2,:3,:4,:5,:6,:7,:8); end;");
            stmt.setObject(1,(serviceObj==null) ? null : serviceObj.asStruct(services.getNativeConnection(conn)));
            stmt.setString(2,tracelevel);
            stmt.setArray(3,buildOracleArrayFromList(services.getNativeConnection(conn),headerTab[0],(com.cisco.mcm.genJava.XxcssQpHeaderType)null));
            stmt.registerOutParameter(3, OracleTypes.ARRAY,"APPS.XXCSS_QP_HEADER_TBL_TYPE");
            stmt.setArray(4,buildOracleArrayFromList(services.getNativeConnection(conn),lineTab,(com.cisco.mcm.genJava.XxcssQpLineType)null));
            stmt.registerOutParameter(5, OracleTypes.NUMBER);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY headerTabArray=(ARRAY)stmt.getArray(3);
            headerTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),headerTab[0],headerTabArray,(com.cisco.mcm.genJava.XxcssQpHeaderType)null);
            serviceCost[0]=(BigDecimal)stmt.getBigDecimal(5);
            returnStatus[0]=(String)stmt.getString(6);
            errorCode[0]=(String)stmt.getString(7);
            errorMsg[0]=(String)stmt.getString(8);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void buildconfiggetpricediff(
        DAOServices services,
        BigDecimal srcContractId,
        BigDecimal trgContractId,
        String srcSiteLoc,
        String trgSiteLoc,
        String srcProdName,
        String srcSerialNumber,
        BigDecimal srcInstanceId,
        BigDecimal srcPriceListId,
        BigDecimal trgPriceListId,
        String tracelevel,
        BigDecimal[] priceDiff,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.buildconfiggetpricediff(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14); end;");
            stmt.setBigDecimal(1,srcContractId);
            stmt.setBigDecimal(2,trgContractId);
            stmt.setString(3,srcSiteLoc);
            stmt.setString(4,trgSiteLoc);
            stmt.setString(5,srcProdName);
            stmt.setString(6,srcSerialNumber);
            stmt.setBigDecimal(7,srcInstanceId);
            stmt.setBigDecimal(8,srcPriceListId);
            stmt.setBigDecimal(9,trgPriceListId);
            stmt.setString(10,tracelevel);
            stmt.registerOutParameter(11, OracleTypes.NUMBER);
            stmt.registerOutParameter(12, OracleTypes.VARCHAR);
            stmt.registerOutParameter(13, OracleTypes.VARCHAR);
            stmt.registerOutParameter(14, OracleTypes.VARCHAR);
            stmt.execute();
            priceDiff[0]=(BigDecimal)stmt.getBigDecimal(11);
            returnStatus[0]=(String)stmt.getString(12);
            errorCode[0]=(String)stmt.getString(13);
            errorMsg[0]=(String)stmt.getString(14);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public BigDecimal getcountrypricelist(
        DAOServices services,
        String country)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_utils.getcountrypricelist(:2); end;");
            stmt.setString(2,country);
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            BigDecimal retval=null;
            retval=(BigDecimal)stmt.getBigDecimal(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getinfoaddinstanceid(
        DAOServices services,
        BigDecimal instanceId,
        String getconinfoflag,
        java.util.List[] contractinfotab,
        java.util.List[] prodinfotab,
        String tracelevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getinfoaddinstanceid(:1,:2,:3,:4,:5,:6,:7); end;");
            stmt.setBigDecimal(1,instanceId);
            stmt.setString(2,getconinfoflag);
            stmt.registerOutParameter(3, OracleTypes.ARRAY,"APPS.XXCSS_MAT_CON_INFO_TAB_TYPE");
            stmt.registerOutParameter(4, OracleTypes.ARRAY,"APPS.XXCSS_MAT_PROD_INFO_TAB_TYPE");
            stmt.setString(5,tracelevel);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY contractinfotabArray=(ARRAY)stmt.getArray(3);
            contractinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),contractinfotab[0],contractinfotabArray,(com.cisco.mcm.genJava.XxcssMatConInfoType)null);
            ARRAY prodinfotabArray=(ARRAY)stmt.getArray(4);
            prodinfotab[0]=buildListFromOracleArray(services.getNativeConnection(conn),prodinfotab[0],prodinfotabArray,(com.cisco.mcm.genJava.XxcssMatProdInfoType)null);
            errorCode[0]=(String)stmt.getString(6);
            errorMsg[0]=(String)stmt.getString(7);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getconfigprice(
        DAOServices services,
        BigDecimal contractId,
        String siteLoc,
        BigDecimal instanceId,
        String tracelevel,
        java.util.List[] headerTab,
        java.util.List[] lineTab,
        BigDecimal[] configPrice,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.getconfigprice(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10); end;");
            stmt.setBigDecimal(1,contractId);
            stmt.setString(2,siteLoc);
            stmt.setBigDecimal(3,instanceId);
            stmt.setString(4,tracelevel);
            stmt.registerOutParameter(5, OracleTypes.ARRAY,"APPS.XXCSS_QP_HEADER_TBL_TYPE");
            stmt.registerOutParameter(6, OracleTypes.ARRAY,"APPS.XXCSS_QP_LINE_TBL_TYPE");
            stmt.registerOutParameter(7, OracleTypes.NUMBER);
            stmt.registerOutParameter(8, OracleTypes.VARCHAR);
            stmt.registerOutParameter(9, OracleTypes.VARCHAR);
            stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY headerTabArray=(ARRAY)stmt.getArray(5);
            headerTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),headerTab[0],headerTabArray,(com.cisco.mcm.genJava.XxcssQpHeaderType)null);
            ARRAY lineTabArray=(ARRAY)stmt.getArray(6);
            lineTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),lineTab[0],lineTabArray,(com.cisco.mcm.genJava.XxcssQpLineType)null);
            configPrice[0]=(BigDecimal)stmt.getBigDecimal(7);
            returnStatus[0]=(String)stmt.getString(8);
            errorCode[0]=(String)stmt.getString(9);
            errorMsg[0]=(String)stmt.getString(10);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void chkMeuGuRules(
        DAOServices services,
        String contractNum,
        String svcLvlName,
        BigDecimal[] guCount,
        String[] returnStatus,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_utils.chk_meu_gu_rules(:1,:2,:3,:4,:5,:6); end;");
            stmt.setString(1,contractNum);
            stmt.setString(2,svcLvlName);
            stmt.registerOutParameter(3, OracleTypes.NUMBER);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            guCount[0]=(BigDecimal)stmt.getBigDecimal(3);
            returnStatus[0]=(String)stmt.getString(4);
            errorCode[0]=(String)stmt.getString(5);
            errorMsg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
