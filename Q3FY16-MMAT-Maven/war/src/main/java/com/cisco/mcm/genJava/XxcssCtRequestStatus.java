/*****************************************************************************
 * XxcssCtRequestStatus.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

/* Begin generated import statements */
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import oracle.jdbc.driver.OracleTypes;
import oracle.sql.ARRAY;
import oracle.sql.STRUCT;

import com.cisco.ca.fea.daoservices.DAOServices;
import com.cisco.ca.fea.daoservices.util.ConnectionUtil;
 


/* End generated import statements */

/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 


public class XxcssCtRequestStatus extends Object implements java.io.Serializable {

    private static XxcssCtRequestStatus theInstance=null;
    
/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */

    


/* BEGIN PROTECT_BLOCK user_public_constants */
/* END PROTECT_BLOCK user_public_constants */


/* BEGIN PROTECT_BLOCK user_static_initializers */
/* END PROTECT_BLOCK user_static_initializers */


    public static synchronized XxcssCtRequestStatus getInstance() {
        if (theInstance==null) {
            theInstance = new XxcssCtRequestStatus();
        }
        return theInstance;
    }
    
    private XxcssCtRequestStatus() {
/* BEGIN PROTECT_BLOCK user_private_constructor */
/* END PROTECT_BLOCK user_private_constructor */

    }
    

    
    private static com.cisco.mcm.genJava.XxcssIlErrorMessageObj buildFromStruct(Connection conn,com.cisco.mcm.genJava.XxcssIlErrorMessageObj attribute,STRUCT struct)
        throws SQLException,InstantiationException,IllegalAccessException {
        com.cisco.mcm.genJava.XxcssIlErrorMessageObj obj=null;
        if (struct==null) {   
            obj=null;
        } else {
            if (attribute==null) {
                obj=com.cisco.mcm.genJava.XxcssIlErrorMessageObj.newFromStruct(conn,struct);
            } else {
                obj=attribute;
                obj.loadFromStruct(conn,struct);
            }
        }
        return obj;
    }

    private static com.cisco.mcm.genJava.XxcssCtErrorMsgObjType buildFromStruct(Connection conn,com.cisco.mcm.genJava.XxcssCtErrorMsgObjType attribute,STRUCT struct)
        throws SQLException,InstantiationException,IllegalAccessException {
        com.cisco.mcm.genJava.XxcssCtErrorMsgObjType obj=null;
        if (struct==null) {   
            obj=null;
        } else {
            if (attribute==null) {
                obj=com.cisco.mcm.genJava.XxcssCtErrorMsgObjType.newFromStruct(conn,struct);
            } else {
                obj=attribute;
                obj.loadFromStruct(conn,struct);
            }
        }
        return obj;
    }
    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssCtChar30ObjType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssCtChar30ObjType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssCtChar30ObjType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssCtRefIdObjType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssCtRefIdObjType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssCtRefIdObjType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

       

    public void getNewRequestId(
        DAOServices services,
        BigDecimal[] requestId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.get_new_request_id(:1); end;");
            stmt.registerOutParameter(1, OracleTypes.NUMBER);
            stmt.execute();
            requestId[0]=(BigDecimal)stmt.getBigDecimal(1);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void createRequest(
        DAOServices services,
        BigDecimal requestId,
        String requestorId,
        String requestType,
        String requestName,
        String functionType)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.create_request(:1,:2,:3,:4,:5); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.setString(2,requestorId);
            stmt.setString(3,requestType);
            stmt.setString(4,requestName);
            stmt.setString(5,functionType);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void updateRequest(
        DAOServices services,
        BigDecimal requestId,
        String requestStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.update_request(:1,:2); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.setString(2,requestStatus);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void updateRequest(
        DAOServices services,
        BigDecimal requestId,
        String requestStatus,
        String referenceId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.update_request(:1,:2,:3); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.setString(2,requestStatus);
            stmt.setString(3,referenceId);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getFunctionType(
        DAOServices services,
        java.util.List[] funcType)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.get_function_type(:1); end;");
            stmt.registerOutParameter(1, OracleTypes.ARRAY,"APPS.XXCSS_CT_CHAR30_TAB_TYPE");
            stmt.execute();
            ARRAY funcTypeArray=(ARRAY)stmt.getArray(1);
            funcType[0]=buildListFromOracleArray(services.getNativeConnection(conn),funcType[0],funcTypeArray,(com.cisco.mcm.genJava.XxcssCtChar30ObjType)null);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getStatusType(
        DAOServices services,
        java.util.List[] statusType)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.get_status_type(:1); end;");
            stmt.registerOutParameter(1, OracleTypes.ARRAY,"APPS.XXCSS_CT_CHAR30_TAB_TYPE");
            stmt.execute();
            ARRAY statusTypeArray=(ARRAY)stmt.getArray(1);
            statusType[0]=buildListFromOracleArray(services.getNativeConnection(conn),statusType[0],statusTypeArray,(com.cisco.mcm.genJava.XxcssCtChar30ObjType)null);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getRequestType(
        DAOServices services,
        java.util.List[] requestType)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.get_request_type(:1); end;");
            stmt.registerOutParameter(1, OracleTypes.ARRAY,"APPS.XXCSS_CT_CHAR30_TAB_TYPE");
            stmt.execute();
            ARRAY requestTypeArray=(ARRAY)stmt.getArray(1);
            requestType[0]=buildListFromOracleArray(services.getNativeConnection(conn),requestType[0],requestTypeArray,(com.cisco.mcm.genJava.XxcssCtChar30ObjType)null);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


   /* public void insertRequestdetails(
        DAOServices services,
        com.cisco.mcm.genJava.XxcssCtReqDetailsObjType requestDetailsObj,
        BigDecimal[] requestDetailsId,
        com.cisco.mcm.genJava.XxcssCtErrorMsgObjType[] errorMessage)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
       
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.insert_requestdetails(:1,:2,:3); end;");
            stmt.setObject(1,(requestDetailsObj==null) ? null : requestDetailsObj.asStruct(services.getNativeConnection(conn)));
            stmt.registerOutParameter(2, OracleTypes.NUMBER);
            stmt.registerOutParameter(3, OracleTypes.STRUCT,"APPS.XXCSS_CT_ERROR_MSG_OBJ_TYPE");
            stmt.execute();
            requestDetailsId[0]=(BigDecimal)stmt.getBigDecimal(2);
            STRUCT errorMessageStruct=(STRUCT)stmt.getObject(3);
            errorMessage[0]=buildFromStruct(services.getNativeConnection(conn),errorMessage[0],errorMessageStruct);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }*/


    public void insertRequestdetails(
        DAOServices services,
        com.cisco.mcm.genJava.XxcssCtReqDetailsObjType requestDetailsObj,
        BigDecimal[] requestDetailsId,
        com.cisco.mcm.genJava.XxcssIlErrorMessageObj[] errorMessage)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
       
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin APPS.xxcss_ct_request_status.insert_requestdetails(:1,:2,:3); end;");
            stmt.setObject(1,(requestDetailsObj==null) ? null : requestDetailsObj.asStruct(services.getNativeConnection(conn)));
            stmt.registerOutParameter(2, OracleTypes.NUMBER);
            stmt.registerOutParameter(3, OracleTypes.STRUCT,"APPS.XXCSS_IL_ERROR_MESSAGE_OBJ");
            stmt.execute();
            requestDetailsId[0]=(BigDecimal)stmt.getBigDecimal(2);
            STRUCT errorMessageStruct=(STRUCT)stmt.getObject(3);
            errorMessage[0]=buildFromStruct(services.getNativeConnection(conn),errorMessage[0],errorMessageStruct);
           
        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getreferenceid(
        DAOServices services,
        BigDecimal requestId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_ct_request_status.getreferenceid(:2); end;");
            stmt.setBigDecimal(2,requestId);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getreferenceidList(
        DAOServices services,
        BigDecimal requestId,
        java.util.List[] refIdTab,
        com.cisco.mcm.genJava.XxcssCtErrorMsgObjType[] errorMessage)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.getreferenceid_list(:1,:2,:3); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.registerOutParameter(2, OracleTypes.ARRAY,"APPS.XXCSS_CT_REF_ID_TYPE_TAB_TYPE");
            stmt.registerOutParameter(3, OracleTypes.STRUCT,"APPS.XXCSS_CT_ERROR_MSG_OBJ_TYPE");
            stmt.execute();
            ARRAY refIdTabArray=(ARRAY)stmt.getArray(2);
            refIdTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),refIdTab[0],refIdTabArray,(com.cisco.mcm.genJava.XxcssCtRefIdObjType)null);
            STRUCT errorMessageStruct=(STRUCT)stmt.getObject(3);
            errorMessage[0]=buildFromStruct(services.getNativeConnection(conn),errorMessage[0],errorMessageStruct);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getreferenceidList(
        DAOServices services,
        BigDecimal requestId,
        java.util.List[] refIdTab,
        com.cisco.mcm.genJava.XxcssIlErrorMessageObj[] errorMessage)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.getreferenceid_list(:1,:2,:3); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.registerOutParameter(2, OracleTypes.ARRAY,"APPS.XXCSS_CT_REF_ID_TYPE_TAB_TYPE");
            stmt.registerOutParameter(3, OracleTypes.STRUCT,"APPS.XXCSS_IL_ERROR_MESSAGE_OBJ");
            stmt.execute();
            ARRAY refIdTabArray=(ARRAY)stmt.getArray(2);
            refIdTab[0]=buildListFromOracleArray(services.getNativeConnection(conn),refIdTab[0],refIdTabArray,(com.cisco.mcm.genJava.XxcssCtRefIdObjType)null);
            STRUCT errorMessageStruct=(STRUCT)stmt.getObject(3);
            errorMessage[0]=buildFromStruct(services.getNativeConnection(conn),errorMessage[0],errorMessageStruct);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void updateRequestdetails(
        DAOServices services,
        BigDecimal requestDetailId,
        String referenceId,
        String status,
        String reason,
        com.cisco.mcm.genJava.XxcssCtErrorMsgObjType[] errorMessage)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.update_requestdetails(:1,:2,:3,:4,:5); end;");
            stmt.setBigDecimal(1,requestDetailId);
            stmt.setString(2,referenceId);
            stmt.setString(3,status);
            stmt.setString(4,reason);
            stmt.registerOutParameter(5, OracleTypes.STRUCT,"APPS.XXCSS_CT_ERROR_MSG_OBJ_TYPE");
            stmt.execute();
            STRUCT errorMessageStruct=(STRUCT)stmt.getObject(5);
            errorMessage[0]=buildFromStruct(services.getNativeConnection(conn),errorMessage[0],errorMessageStruct);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void updateRequestdetails(
        DAOServices services,
        BigDecimal requestId,
        String referenceId,
        String status,
        String reason,
        String[] errorMessage)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.update_requestdetails(:1,:2,:3,:4,:5); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.setString(2,referenceId);
            stmt.setString(3,status);
            stmt.setString(4,reason);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            errorMessage[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void insertRequestdetails(
        DAOServices services,
        BigDecimal requestId,
        String referenceId,
        String action,
        Timestamp startDate,
        Timestamp completeDate,
        String status,
        String reason,
        BigDecimal userId,
        String[] errorRef,
        String[] errorCode,
        String[] errorType,
        String[] errorMessage,
        String[] suggestedAction,
        String[] applicationShortName,
        String[] languageCode,
        BigDecimal[] messageNumber,
        String[] type,
        String[] description,
        String[] category,
        BigDecimal[] fndLogSeverity,
        String[] fndLogSeverityDes,
        String[] logAttribute,
        String[] categoryDetail,
        String[] severityDetail)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_ct_request_status.insert_requestdetails(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22,:23,:24); end;");
            stmt.setBigDecimal(1,requestId);
            stmt.setString(2,referenceId);
            stmt.setString(3,action);
            stmt.setTimestamp(4,startDate);
            stmt.setTimestamp(5,completeDate);
            stmt.setString(6,status);
            stmt.setString(7,reason);
            stmt.setBigDecimal(8,userId);
            stmt.registerOutParameter(9, OracleTypes.VARCHAR);
            stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.registerOutParameter(11, OracleTypes.VARCHAR);
            stmt.registerOutParameter(12, OracleTypes.VARCHAR);
            stmt.registerOutParameter(13, OracleTypes.VARCHAR);
            stmt.registerOutParameter(14, OracleTypes.VARCHAR);
            stmt.registerOutParameter(15, OracleTypes.VARCHAR);
            stmt.registerOutParameter(16, OracleTypes.NUMBER);
            stmt.registerOutParameter(17, OracleTypes.VARCHAR);
            stmt.registerOutParameter(18, OracleTypes.VARCHAR);
            stmt.registerOutParameter(19, OracleTypes.VARCHAR);
            stmt.registerOutParameter(20, OracleTypes.NUMBER);
            stmt.registerOutParameter(21, OracleTypes.VARCHAR);
            stmt.registerOutParameter(22, OracleTypes.VARCHAR);
            stmt.registerOutParameter(23, OracleTypes.VARCHAR);
            stmt.registerOutParameter(24, OracleTypes.VARCHAR);
            stmt.execute();
            errorRef[0]=(String)stmt.getString(9);
            errorCode[0]=(String)stmt.getString(10);
            errorType[0]=(String)stmt.getString(11);
            errorMessage[0]=(String)stmt.getString(12);
            suggestedAction[0]=(String)stmt.getString(13);
            applicationShortName[0]=(String)stmt.getString(14);
            languageCode[0]=(String)stmt.getString(15);
            messageNumber[0]=(BigDecimal)stmt.getBigDecimal(16);
            type[0]=(String)stmt.getString(17);
            description[0]=(String)stmt.getString(18);
            category[0]=(String)stmt.getString(19);
            fndLogSeverity[0]=(BigDecimal)stmt.getBigDecimal(20);
            fndLogSeverityDes[0]=(String)stmt.getString(21);
            logAttribute[0]=(String)stmt.getString(22);
            categoryDetail[0]=(String)stmt.getString(23);
            severityDetail[0]=(String)stmt.getString(24);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
