/*****************************************************************************
 * XxcssScmGenericUtils.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

/* Begin generated import statements */
import java.io.*;
import java.util.*;
import oracle.jdbc.driver.*;
import java.sql.*;
import oracle.sql.*;
import java.math.BigDecimal;
import com.cisco.ca.fea.daoservices.DAOServices;
import com.cisco.ca.fea.daoservices.util.ConnectionUtil;
 


/* End generated import statements */

/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 


public class XxcssScmGenericUtils extends Object implements java.io.Serializable {

    private static XxcssScmGenericUtils theInstance=null;
    
/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */

    


/* BEGIN PROTECT_BLOCK user_public_constants */
/* END PROTECT_BLOCK user_public_constants */


/* BEGIN PROTECT_BLOCK user_static_initializers */
/* END PROTECT_BLOCK user_static_initializers */


    public static synchronized XxcssScmGenericUtils getInstance() {
        if (theInstance==null) {
            theInstance = new XxcssScmGenericUtils();
        }
        return theInstance;
    }
    
    private XxcssScmGenericUtils() {
/* BEGIN PROTECT_BLOCK user_private_constructor */
/* END PROTECT_BLOCK user_private_constructor */

    }
    

    
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssSsfUpldParmObjType dummy)
        throws SQLException {
     //   ARRAY oracleArray=null;
        com.cisco.mcm.genJava.XxcssSsfUpldParmObjType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_SSF_UPLD_PARM_TAB_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssSsfUpldParmObjType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }
    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,com.cisco.mcm.genJava.XxcssScmValOverideType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        com.cisco.mcm.genJava.XxcssScmValOverideType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=com.cisco.mcm.genJava.XxcssScmValOverideType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

       

    public void logMessage(
        DAOServices services,
        String message)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_scm_generic_utils.log_message(:1); end;");
            stmt.setString(1,message);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void traceErrLvl(
        DAOServices services,
        String traceLevel,
        String callingProc,
        String traceMsg,
        String traceType,
        BigDecimal traceId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_scm_generic_utils.trace_err_lvl(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,traceLevel);
            stmt.setString(2,callingProc);
            stmt.setString(3,traceMsg);
            stmt.setString(4,traceType);
            stmt.setBigDecimal(5,traceId);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public String getReqStatusPage(
        DAOServices services)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_scm_generic_utils.get_req_status_page; end;");
            /*6*/stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void setAppsinfo(
        DAOServices services,
        String userName,
        String responsibilityKey,
        String applicationShortName,
        String traceLevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_scm_generic_utils.set_appsinfo(:1,:2,:3,:4,:5,:6); end;");
            stmt.setString(1,userName);
            stmt.setString(2,responsibilityKey);
            stmt.setString(3,applicationShortName);
            stmt.setString(4,traceLevel);
            /*3*/stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            /*3*/stmt.registerOutParameter(6, OracleTypes.VARCHAR);
            stmt.execute();
            errorCode[0]=(String)stmt.getString(5);
            errorMsg[0]=(String)stmt.getString(6);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void upldSendemail(
        DAOServices services,
        String emailTo,
        String emailCc,
        String emailBcc,
        String emailFrom,
        String emailSubject,
        String emailSalutation,
        String emailBody,
        String emailAttachment,
        String traceLevel,
        BLOB blobAttach,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_scm_generic_utils.upld_sendemail(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12); end;");
            stmt.setString(1,emailTo);
            stmt.setString(2,emailCc);
            stmt.setString(3,emailBcc);
            stmt.setString(4,emailFrom);
            stmt.setString(5,emailSubject);
            stmt.setString(6,emailSalutation);
            stmt.setString(7,emailBody);
            stmt.setString(8,emailAttachment);
            stmt.setString(9,traceLevel);
            stmt.setBlob(10,blobAttach);
            /*3*/stmt.registerOutParameter(11, OracleTypes.VARCHAR);
            /*3*/stmt.registerOutParameter(12, OracleTypes.VARCHAR);
            stmt.execute();
            errorCode[0]=(String)stmt.getString(11);
            errorMsg[0]=(String)stmt.getString(12);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void submitcmjob(
        DAOServices services,
        String cmUserName,
        String cmResponsibilityKey,
        String cmApplicationShortName,
        String cmPgmName,
        String cmReqDesc,
        java.util.List parmTab,
        BigDecimal[] cmRequestId,
        String traceLevel,
        String[] errorCode,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_scm_generic_utils.submitcmjob(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10); end;");
            stmt.setString(1,cmUserName);
            stmt.setString(2,cmResponsibilityKey);
            stmt.setString(3,cmApplicationShortName);
            stmt.setString(4,cmPgmName);
            stmt.setString(5,cmReqDesc);
            stmt.setArray(6,buildOracleArrayFromList(services.getNativeConnection(conn),parmTab,(com.cisco.mcm.genJava.XxcssSsfUpldParmObjType)null));
            stmt.setBigDecimal(7,cmRequestId[0]);
            /*3*/stmt.registerOutParameter(7, OracleTypes.NUMBER);
            stmt.setString(8,traceLevel);
            /*3*/stmt.registerOutParameter(9, OracleTypes.VARCHAR);
            /*3*/stmt.registerOutParameter(10, OracleTypes.VARCHAR);
            stmt.execute();
            cmRequestId[0]=(BigDecimal)stmt.getBigDecimal(7);
            errorCode[0]=(String)stmt.getString(9);
            errorMsg[0]=(String)stmt.getString(10);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void getUpldOverridableVals(
        DAOServices services,
        String reqType,
        java.util.List[] overrideVals,
        String[] returnStatus,
        String[] errorMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_scm_generic_utils.get_upld_overridable_vals(:1,:2,:3,:4); end;");
            stmt.setString(1,reqType);
            /*2*/stmt.registerOutParameter(2, OracleTypes.ARRAY,"APPS.XXCSS_SCM_VAL_OVERIDE_TAB_TYPE");
            /*3*/stmt.registerOutParameter(3, OracleTypes.VARCHAR);
            /*3*/stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.execute();
            ARRAY overrideValsArray=(ARRAY)stmt.getArray(2);
            overrideVals[0]=buildListFromOracleArray(services.getNativeConnection(conn),overrideVals[0],overrideValsArray,(com.cisco.mcm.genJava.XxcssScmValOverideType)null);
            returnStatus[0]=(String)stmt.getString(3);
            errorMsg[0]=(String)stmt.getString(4);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
