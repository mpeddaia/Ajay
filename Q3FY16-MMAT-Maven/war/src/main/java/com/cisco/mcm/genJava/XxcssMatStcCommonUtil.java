/*****************************************************************************
 * XxcssMatStcCommonUtil.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/
package com.cisco.mcm.genJava;


/* Begin generated import statements */
import java.io.*;
import java.util.*;
import oracle.jdbc.driver.*;
import java.sql.*;
import oracle.sql.*;
import java.math.BigDecimal;
import com.cisco.ca.fea.daoservices.DAOServices;
import com.cisco.ca.fea.daoservices.util.ConnectionUtil;
 


/* End generated import statements */

/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 


public class XxcssMatStcCommonUtil extends Object implements java.io.Serializable {

    private static XxcssMatStcCommonUtil theInstance=null;
    
/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */

    


/* BEGIN PROTECT_BLOCK user_public_constants */
/* END PROTECT_BLOCK user_public_constants */


/* BEGIN PROTECT_BLOCK user_static_initializers */
/* END PROTECT_BLOCK user_static_initializers */


    public static synchronized XxcssMatStcCommonUtil getInstance() {
        if (theInstance==null) {
            theInstance = new XxcssMatStcCommonUtil();
        }
        return theInstance;
    }
    
    private XxcssMatStcCommonUtil() {
/* BEGIN PROTECT_BLOCK user_private_constructor */
/* END PROTECT_BLOCK user_private_constructor */

    }
    

    
    private static XxcssMatAddRecType buildFromStruct(Connection conn,XxcssMatAddRecType attribute,STRUCT struct)
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssMatAddRecType obj=null;
        if (struct==null) {   
            obj=null;
        } else {
            if (attribute==null) {
                obj=XxcssMatAddRecType.newFromStruct(conn,struct);
            } else {
                obj=attribute;
                obj.loadFromStruct(conn,struct);
            }
        }
        return obj;
    }
    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,XxcssMatCovLineRecType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
        List rlist=null;
        XxcssMatCovLineRecType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=XxcssMatCovLineRecType.newFromStruct(conn,struct);
                }
                rlist.add(element);
            }
        }
        return rlist;
    }

    private static List buildListFromOracleArray(Connection conn,List list,ARRAY array,XxcssMatStcMigType dummy)
        throws SQLException,InstantiationException,IllegalAccessException {
	System.out.println("Building the List from Oracle Array "+array);
        List rlist=null;
        XxcssMatStcMigType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        rlist=(list==null) ? new ArrayList() : list;
        if (list != null) {
            list.clear();
        }
        if (array!=null) {
            jarray=(Object[])array.getArray();
            System.out.println("Array is not a null "+jarray);
            if(jarray!=null)
        	System.out.println("the jarray length is :" +jarray.length);
            for (int i=0;i<jarray.length;i++) {
                struct=(STRUCT)jarray[i];
                if (struct == null) {
                    element = null;
                } else {
                    element=XxcssMatStcMigType.newFromStruct(conn,struct);
                    System.out.println("The element is :"+element);
                }
                rlist.add(element);
            }
        }
        System.out.println("Before returning the rlist "+rlist);
        return rlist;
    }

       

    public void updatePriorityCode(
        DAOServices services,
        String pContractNumber,
        String pSource,
        String pMesgDesc,
        String[] pErrorMsg,
        String[] pReturnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_stc_common_util.update_priority_code(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,pContractNumber);
            stmt.setString(2,pSource);
            stmt.setString(3,pMesgDesc);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            pErrorMsg[0]=(String)stmt.getString(4);
            pReturnStatus[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void deriveOrgId(
        DAOServices services,
        String pContractNumber,
        String pBillToId,
        BigDecimal[] pOrgId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_stc_common_util.derive_org_id(:1,:2,:3); end;");
            stmt.setString(1,pContractNumber);
            stmt.setString(2,pBillToId);
            stmt.registerOutParameter(3, OracleTypes.NUMBER);
            stmt.execute();
            pOrgId[0]=(BigDecimal)stmt.getBigDecimal(3);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void softLockContract(
        DAOServices services,
        String pContractNumber,
        String pSource,
        String pMesgDesc,
        String[] pReturnStatus,
        String[] pReturnMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_stc_common_util.soft_lock_contract(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,pContractNumber);
            stmt.setString(2,pSource);
            stmt.setString(3,pMesgDesc);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            pReturnStatus[0]=(String)stmt.getString(4);
            pReturnMsg[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void softUnlockContract(
        DAOServices services,
        String pContractNumber,
        String pSource,
        String pMesgDesc,
        String[] pReturnStatus,
        String[] pReturnMsg)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_stc_common_util.soft_unlock_contract(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,pContractNumber);
            stmt.setString(2,pSource);
            stmt.setString(3,pMesgDesc);
            stmt.registerOutParameter(4, OracleTypes.VARCHAR);
            stmt.registerOutParameter(5, OracleTypes.VARCHAR);
            stmt.execute();
            pReturnStatus[0]=(String)stmt.getString(4);
            pReturnMsg[0]=(String)stmt.getString(5);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public List countryUiMigration(
        DAOServices services,
        String pContractNumber,
        String pBillToId,
        String pCustomerName,
        String pMigrationFlag,
        java.util.List[] pResult)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            System.out.println("Inside genJava file "+pContractNumber);
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin APPS.xxcss_mat_stc_common_util.country_ui_migration(:1,:2,:3,:4,:5); end;");
            stmt.setString(1,pContractNumber);
            stmt.setString(2,pBillToId);
            stmt.setString(3,pCustomerName);
            stmt.setString(4,pMigrationFlag);
            stmt.registerOutParameter(5, OracleTypes.ARRAY,"APPS.XXCSS_MAT_STC_TAB_TYPE");
            stmt.execute();
            ARRAY pResultArray=(ARRAY)stmt.getArray(5);
            if(pResultArray !=null&&pResultArray.length()> 0)
        	System.out.println("we are getting the pResultArray length "+pResultArray.length());
            System.out.println("getting pResultArray :\t"+pResultArray);
            pResult[0]=buildListFromOracleArray(services.getNativeConnection(conn),pResult[0],pResultArray,(XxcssMatStcMigType)null);
            System.out.println("The final result from genJava file is "+pResult[0]);
        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
        return pResult[0];
    }


    public void captureStcMigration(
        DAOServices services,
        String contractNumber,
        String sourceSystem,
        BigDecimal orgId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_stc_common_util.capture_stc_migration(:1,:2,:3); end;");
            stmt.setString(1,contractNumber);
            stmt.setString(2,sourceSystem);
            stmt.setBigDecimal(3,orgId);
            stmt.execute();

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
