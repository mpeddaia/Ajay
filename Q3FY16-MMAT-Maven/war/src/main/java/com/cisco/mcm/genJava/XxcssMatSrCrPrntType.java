/*****************************************************************************
 * XxcssMatSrCrPrntType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssMatSrCrPrntType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssMatSrCrPrntType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssMatSrCrPrntType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssMatSrCrPrntType) factoryClass.newInstance();
    }

public XxcssMatSrCrPrntType() {
        upldRequestId=MISSING_NUM;
        origRowNumber=MISSING_NUM;
        customerName=MISSING_CHAR;
        businessEntity=MISSING_CHAR;
        address1=MISSING_CHAR;
        address2=MISSING_CHAR;
        address3=MISSING_CHAR;
        city=MISSING_CHAR;
        state=MISSING_CHAR;
        province=MISSING_CHAR;
        zipCode=MISSING_CHAR;
        country=MISSING_CHAR;
        county=MISSING_CHAR;
        csCaseNumber=MISSING_CHAR;
        siteId=MISSING_CHAR;
        status=MISSING_CHAR;
        errorCode=MISSING_CHAR;
        errorMessage=MISSING_CHAR;
        createdBy=MISSING_NUM;
        creationDate=MISSING_DATE;
        lastUpdatedBy=MISSING_NUM;
        lastUpdateDate=MISSING_DATE;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal upldRequestId;
    private BigDecimal origRowNumber;
    private String customerName;
    private String businessEntity;
    private String address1;
    private String address2;
    private String address3;
    private String city;
    private String state;
    private String province;
    private String zipCode;
    private String country;
    private String county;
    private String csCaseNumber;
    private String siteId;
    private String status;
    private String errorCode;
    private String errorMessage;
    private BigDecimal createdBy;
    private Timestamp creationDate;
    private BigDecimal lastUpdatedBy;
    private Timestamp lastUpdateDate;


    // getter methods
    public BigDecimal getUpldRequestId() {
        return upldRequestId;
    }
    public BigDecimal getOrigRowNumber() {
        return origRowNumber;
    }
    public String getCustomerName() {
        return customerName;
    }
    public String getBusinessEntity() {
        return businessEntity;
    }
    public String getAddress1() {
        return address1;
    }
    public String getAddress2() {
        return address2;
    }
    public String getAddress3() {
        return address3;
    }
    public String getCity() {
        return city;
    }
    public String getState() {
        return state;
    }
    public String getProvince() {
        return province;
    }
    public String getZipCode() {
        return zipCode;
    }
    public String getCountry() {
        return country;
    }
    public String getCounty() {
        return county;
    }
    public String getCsCaseNumber() {
        return csCaseNumber;
    }
    public String getSiteId() {
        return siteId;
    }
    public String getStatus() {
        return status;
    }
    public String getErrorCode() {
        return errorCode;
    }
    public String getErrorMessage() {
        return errorMessage;
    }
    public BigDecimal getCreatedBy() {
        return createdBy;
    }
    public Timestamp getCreationDate() {
        return creationDate;
    }
    public BigDecimal getLastUpdatedBy() {
        return lastUpdatedBy;
    }
    public Timestamp getLastUpdateDate() {
        return lastUpdateDate;
    }

    // setter methods                       
    public void setUpldRequestId(BigDecimal aUpldRequestId) {
        upldRequestId = aUpldRequestId;
    }
    public void setOrigRowNumber(BigDecimal aOrigRowNumber) {
        origRowNumber = aOrigRowNumber;
    }
    public void setCustomerName(String aCustomerName) {
        customerName = aCustomerName;
    }
    public void setBusinessEntity(String aBusinessEntity) {
        businessEntity = aBusinessEntity;
    }
    public void setAddress1(String aAddress1) {
        address1 = aAddress1;
    }
    public void setAddress2(String aAddress2) {
        address2 = aAddress2;
    }
    public void setAddress3(String aAddress3) {
        address3 = aAddress3;
    }
    public void setCity(String aCity) {
        city = aCity;
    }
    public void setState(String aState) {
        state = aState;
    }
    public void setProvince(String aProvince) {
        province = aProvince;
    }
    public void setZipCode(String aZipCode) {
        zipCode = aZipCode;
    }
    public void setCountry(String aCountry) {
        country = aCountry;
    }
    public void setCounty(String aCounty) {
        county = aCounty;
    }
    public void setCsCaseNumber(String aCsCaseNumber) {
        csCaseNumber = aCsCaseNumber;
    }
    public void setSiteId(String aSiteId) {
        siteId = aSiteId;
    }
    public void setStatus(String aStatus) {
        status = aStatus;
    }
    public void setErrorCode(String aErrorCode) {
        errorCode = aErrorCode;
    }
    public void setErrorMessage(String aErrorMessage) {
        errorMessage = aErrorMessage;
    }
    public void setCreatedBy(BigDecimal aCreatedBy) {
        createdBy = aCreatedBy;
    }
    public void setCreationDate(Timestamp aCreationDate) {
        creationDate = aCreationDate;
    }
    public void setLastUpdatedBy(BigDecimal aLastUpdatedBy) {
        lastUpdatedBy = aLastUpdatedBy;
    }
    public void setLastUpdateDate(Timestamp aLastUpdateDate) {
        lastUpdateDate = aLastUpdateDate;
    }


    // other methods


    public XxcssMatSrCrPrntType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        upldRequestId=(BigDecimal)attributes[0];
        origRowNumber=(BigDecimal)attributes[1];
        customerName=(String)attributes[2];
        businessEntity=(String)attributes[3];
        address1=(String)attributes[4];
        address2=(String)attributes[5];
        address3=(String)attributes[6];
        city=(String)attributes[7];
        state=(String)attributes[8];
        province=(String)attributes[9];
        zipCode=(String)attributes[10];
        country=(String)attributes[11];
        county=(String)attributes[12];
        csCaseNumber=(String)attributes[13];
        siteId=(String)attributes[14];
        status=(String)attributes[15];
        errorCode=(String)attributes[16];
        errorMessage=(String)attributes[17];
        createdBy=(BigDecimal)attributes[18];
        creationDate=(Timestamp)attributes[19];
        lastUpdatedBy=(BigDecimal)attributes[20];
        lastUpdateDate=(Timestamp)attributes[21];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_MAT_SR_CR_PRNT_TYPE",conn);
        Object[] attributes = new Object[]{
            upldRequestId,
            origRowNumber,
            ((customerName==null) ? null : new CHAR(customerName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((businessEntity==null) ? null : new CHAR(businessEntity,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((address1==null) ? null : new CHAR(address1,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((address2==null) ? null : new CHAR(address2,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((address3==null) ? null : new CHAR(address3,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((city==null) ? null : new CHAR(city,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((state==null) ? null : new CHAR(state,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((province==null) ? null : new CHAR(province,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((zipCode==null) ? null : new CHAR(zipCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((country==null) ? null : new CHAR(country,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((county==null) ? null : new CHAR(county,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((csCaseNumber==null) ? null : new CHAR(csCaseNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((siteId==null) ? null : new CHAR(siteId,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((status==null) ? null : new CHAR(status,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((errorCode==null) ? null : new CHAR(errorCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((errorMessage==null) ? null : new CHAR(errorMessage,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            createdBy,
            creationDate,
            lastUpdatedBy,
            lastUpdateDate
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssMatSrCrPrntType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssMatSrCrPrntType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("upldRequestId=").append(upldRequestId);
        sb.append(",origRowNumber=").append(origRowNumber);
        sb.append(",customerName=").append(customerName);
        sb.append(",businessEntity=").append(businessEntity);
        sb.append(",address1=").append(address1);
        sb.append(",address2=").append(address2);
        sb.append(",address3=").append(address3);
        sb.append(",city=").append(city);
        sb.append(",state=").append(state);
        sb.append(",province=").append(province);
        sb.append(",zipCode=").append(zipCode);
        sb.append(",country=").append(country);
        sb.append(",county=").append(county);
        sb.append(",csCaseNumber=").append(csCaseNumber);
        sb.append(",siteId=").append(siteId);
        sb.append(",status=").append(status);
        sb.append(",errorCode=").append(errorCode);
        sb.append(",errorMessage=").append(errorMessage);
        sb.append(",createdBy=").append(createdBy);
        sb.append(",creationDate=").append(creationDate);
        sb.append(",lastUpdatedBy=").append(lastUpdatedBy);
        sb.append(",lastUpdateDate=").append(lastUpdateDate);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssMatSrCrPrntType theClone = (XxcssMatSrCrPrntType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("upldRequestId=").append(upldRequestId);
        hashStringBuffer.append("origRowNumber=").append(origRowNumber);
        hashStringBuffer.append("customerName=").append(customerName);
        hashStringBuffer.append("businessEntity=").append(businessEntity);
        hashStringBuffer.append("address1=").append(address1);
        hashStringBuffer.append("address2=").append(address2);
        hashStringBuffer.append("address3=").append(address3);
        hashStringBuffer.append("city=").append(city);
        hashStringBuffer.append("state=").append(state);
        hashStringBuffer.append("province=").append(province);
        hashStringBuffer.append("zipCode=").append(zipCode);
        hashStringBuffer.append("country=").append(country);
        hashStringBuffer.append("county=").append(county);
        hashStringBuffer.append("csCaseNumber=").append(csCaseNumber);
        hashStringBuffer.append("siteId=").append(siteId);
        hashStringBuffer.append("status=").append(status);
        hashStringBuffer.append("errorCode=").append(errorCode);
        hashStringBuffer.append("errorMessage=").append(errorMessage);
        hashStringBuffer.append("createdBy=").append(createdBy);
        hashStringBuffer.append("creationDate=").append(creationDate);
        hashStringBuffer.append("lastUpdatedBy=").append(lastUpdatedBy);
        hashStringBuffer.append("lastUpdateDate=").append(lastUpdateDate);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
