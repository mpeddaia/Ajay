/*****************************************************************************
 * XxcssQpLineType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssQpLineType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssQpLineType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssQpLineType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssQpLineType) factoryClass.newInstance();
    }

public XxcssQpLineType() {
        transactionHeaderId=MISSING_NUM;
        transactionNumber=MISSING_CHAR;
        transactionLineId=MISSING_NUM;
        transactionLineNumber=MISSING_CHAR;
        transactionLineIndex=MISSING_NUM;
        parentLineNumber=MISSING_CHAR;
        productSku=MISSING_CHAR;
        productSkuId=MISSING_NUM;
        serviceLevel=MISSING_CHAR;
        serviceSku=MISSING_CHAR;
        serviceSkuId=MISSING_NUM;
        qty=MISSING_NUM;
        pricingDate=MISSING_DATE;
        lineStartDate=MISSING_DATE;
        lineEndDate=MISSING_DATE;
        priceListId=MISSING_NUM;
        intendedUse=MISSING_CHAR;
        installCountryCode=MISSING_CHAR;
        endUserCustomerNumber=MISSING_NUM;
        productListPrice=MISSING_NUM;
        productNetPrice=MISSING_NUM;
        productPriceCurrencyCode=MISSING_CHAR;
        creditFlag=MISSING_CHAR;
        originalStartDate=MISSING_DATE;
        originalEndDate=MISSING_DATE;
        newStartDate=MISSING_DATE;
        originalServiceListPrice=MISSING_NUM;
        originalServiceNetPrice=MISSING_NUM;
        originalCurrency=MISSING_CHAR;
        originalQty=MISSING_NUM;
        ciqFlag=MISSING_CHAR;
        dealId=MISSING_NUM;
        revenueSourceCode=MISSING_CHAR;
        userEnteredDiscPercent=MISSING_NUM;
        userEnteredDiscAmount=MISSING_NUM;
        userEnteredNetPrice=MISSING_NUM;
        pricingBasis=MISSING_CHAR;
        pricingBasisPercentage=MISSING_NUM;
        customerNumber=MISSING_NUM;
        billToId=MISSING_NUM;
        billToCountryCode=MISSING_CHAR;
        transactionCurrencyCode=MISSING_CHAR;
        pricingMethodCode=MISSING_CHAR;
        priceListName=MISSING_CHAR;
        priceListListPrice=MISSING_NUM;
        priceListCurrency=MISSING_CHAR;
        currencyConversionRate=MISSING_NUM;
        listPriceDurationQty=MISSING_NUM;
        percentageReferencePrice=MISSING_NUM;
        percentageReferenceCurrency=MISSING_CHAR;
        listPricePercentage=MISSING_NUM;
        listPrice=MISSING_NUM;
        pdInternalListPrice=MISSING_NUM;
        netPrice=MISSING_NUM;
        extendedPrice=MISSING_NUM;
        effectiveTotalDiscount=MISSING_NUM;
        effectiveStandardDiscount=MISSING_NUM;
        etdAmount=MISSING_NUM;
        esdAmount=MISSING_NUM;
        alternateNetPrice=MISSING_NUM;
        alternateExtendedPrice=MISSING_NUM;
        alternateTotalDiscountPerc=MISSING_NUM;
        alternateTotalDiscountAmt=MISSING_NUM;
        calcExtendedCreditAmount=MISSING_NUM;
        notToExceedAmount=MISSING_NUM;
        statusDetails=null;
        euFlag=MISSING_CHAR;
        destCustNumber=MISSING_NUM;
        channelProgram=MISSING_CHAR;
        installAtTheater=MISSING_CHAR;
        installAtGeo=MISSING_CHAR;
        mnqDestEligibleFlag=MISSING_CHAR;
        attribute1=MISSING_CHAR;
        attribute2=MISSING_CHAR;
        attribute3=MISSING_CHAR;
        attribute4=MISSING_CHAR;
        attribute5=MISSING_CHAR;
        attribute6=MISSING_CHAR;
        attribute7=MISSING_CHAR;
        attribute8=MISSING_CHAR;
        attribute9=MISSING_CHAR;
        attribute10=MISSING_CHAR;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal transactionHeaderId;
    private String transactionNumber;
    private BigDecimal transactionLineId;
    private String transactionLineNumber;
    private BigDecimal transactionLineIndex;
    private String parentLineNumber;
    private String productSku;
    private BigDecimal productSkuId;
    private String serviceLevel;
    private String serviceSku;
    private BigDecimal serviceSkuId;
    private BigDecimal qty;
    private Timestamp pricingDate;
    private Timestamp lineStartDate;
    private Timestamp lineEndDate;
    private BigDecimal priceListId;
    private String intendedUse;
    private String installCountryCode;
    private BigDecimal endUserCustomerNumber;
    private BigDecimal productListPrice;
    private BigDecimal productNetPrice;
    private String productPriceCurrencyCode;
    private String creditFlag;
    private Timestamp originalStartDate;
    private Timestamp originalEndDate;
    private Timestamp newStartDate;
    private BigDecimal originalServiceListPrice;
    private BigDecimal originalServiceNetPrice;
    private String originalCurrency;
    private BigDecimal originalQty;
    private String ciqFlag;
    private BigDecimal dealId;
    private String revenueSourceCode;
    private BigDecimal userEnteredDiscPercent;
    private BigDecimal userEnteredDiscAmount;
    private BigDecimal userEnteredNetPrice;
    private String pricingBasis;
    private BigDecimal pricingBasisPercentage;
    private BigDecimal customerNumber;
    private BigDecimal billToId;
    private String billToCountryCode;
    private String transactionCurrencyCode;
    private String pricingMethodCode;
    private String priceListName;
    private BigDecimal priceListListPrice;
    private String priceListCurrency;
    private BigDecimal currencyConversionRate;
    private BigDecimal listPriceDurationQty;
    private BigDecimal percentageReferencePrice;
    private String percentageReferenceCurrency;
    private BigDecimal listPricePercentage;
    private BigDecimal listPrice;
    private BigDecimal pdInternalListPrice;
    private BigDecimal netPrice;
    private BigDecimal extendedPrice;
    private BigDecimal effectiveTotalDiscount;
    private BigDecimal effectiveStandardDiscount;
    private BigDecimal etdAmount;
    private BigDecimal esdAmount;
    private BigDecimal alternateNetPrice;
    private BigDecimal alternateExtendedPrice;
    private BigDecimal alternateTotalDiscountPerc;
    private BigDecimal alternateTotalDiscountAmt;
    private BigDecimal calcExtendedCreditAmount;
    private BigDecimal notToExceedAmount;
    private com.cisco.mcm.genJava.XxcssIlErrorMessageObj statusDetails;
    private String euFlag;
    private BigDecimal destCustNumber;
    private String channelProgram;
    private String installAtTheater;
    private String installAtGeo;
    private String mnqDestEligibleFlag;
    private String attribute1;
    private String attribute2;
    private String attribute3;
    private String attribute4;
    private String attribute5;
    private String attribute6;
    private String attribute7;
    private String attribute8;
    private String attribute9;
    private String attribute10;


    // getter methods
    public BigDecimal getTransactionHeaderId() {
        return transactionHeaderId;
    }
    public String getTransactionNumber() {
        return transactionNumber;
    }
    public BigDecimal getTransactionLineId() {
        return transactionLineId;
    }
    public String getTransactionLineNumber() {
        return transactionLineNumber;
    }
    public BigDecimal getTransactionLineIndex() {
        return transactionLineIndex;
    }
    public String getParentLineNumber() {
        return parentLineNumber;
    }
    public String getProductSku() {
        return productSku;
    }
    public BigDecimal getProductSkuId() {
        return productSkuId;
    }
    public String getServiceLevel() {
        return serviceLevel;
    }
    public String getServiceSku() {
        return serviceSku;
    }
    public BigDecimal getServiceSkuId() {
        return serviceSkuId;
    }
    public BigDecimal getQty() {
        return qty;
    }
    public Timestamp getPricingDate() {
        return pricingDate;
    }
    public Timestamp getLineStartDate() {
        return lineStartDate;
    }
    public Timestamp getLineEndDate() {
        return lineEndDate;
    }
    public BigDecimal getPriceListId() {
        return priceListId;
    }
    public String getIntendedUse() {
        return intendedUse;
    }
    public String getInstallCountryCode() {
        return installCountryCode;
    }
    public BigDecimal getEndUserCustomerNumber() {
        return endUserCustomerNumber;
    }
    public BigDecimal getProductListPrice() {
        return productListPrice;
    }
    public BigDecimal getProductNetPrice() {
        return productNetPrice;
    }
    public String getProductPriceCurrencyCode() {
        return productPriceCurrencyCode;
    }
    public String getCreditFlag() {
        return creditFlag;
    }
    public Timestamp getOriginalStartDate() {
        return originalStartDate;
    }
    public Timestamp getOriginalEndDate() {
        return originalEndDate;
    }
    public Timestamp getNewStartDate() {
        return newStartDate;
    }
    public BigDecimal getOriginalServiceListPrice() {
        return originalServiceListPrice;
    }
    public BigDecimal getOriginalServiceNetPrice() {
        return originalServiceNetPrice;
    }
    public String getOriginalCurrency() {
        return originalCurrency;
    }
    public BigDecimal getOriginalQty() {
        return originalQty;
    }
    public String getCiqFlag() {
        return ciqFlag;
    }
    public BigDecimal getDealId() {
        return dealId;
    }
    public String getRevenueSourceCode() {
        return revenueSourceCode;
    }
    public BigDecimal getUserEnteredDiscPercent() {
        return userEnteredDiscPercent;
    }
    public BigDecimal getUserEnteredDiscAmount() {
        return userEnteredDiscAmount;
    }
    public BigDecimal getUserEnteredNetPrice() {
        return userEnteredNetPrice;
    }
    public String getPricingBasis() {
        return pricingBasis;
    }
    public BigDecimal getPricingBasisPercentage() {
        return pricingBasisPercentage;
    }
    public BigDecimal getCustomerNumber() {
        return customerNumber;
    }
    public BigDecimal getBillToId() {
        return billToId;
    }
    public String getBillToCountryCode() {
        return billToCountryCode;
    }
    public String getTransactionCurrencyCode() {
        return transactionCurrencyCode;
    }
    public String getPricingMethodCode() {
        return pricingMethodCode;
    }
    public String getPriceListName() {
        return priceListName;
    }
    public BigDecimal getPriceListListPrice() {
        return priceListListPrice;
    }
    public String getPriceListCurrency() {
        return priceListCurrency;
    }
    public BigDecimal getCurrencyConversionRate() {
        return currencyConversionRate;
    }
    public BigDecimal getListPriceDurationQty() {
        return listPriceDurationQty;
    }
    public BigDecimal getPercentageReferencePrice() {
        return percentageReferencePrice;
    }
    public String getPercentageReferenceCurrency() {
        return percentageReferenceCurrency;
    }
    public BigDecimal getListPricePercentage() {
        return listPricePercentage;
    }
    public BigDecimal getListPrice() {
        return listPrice;
    }
    public BigDecimal getPdInternalListPrice() {
        return pdInternalListPrice;
    }
    public BigDecimal getNetPrice() {
        return netPrice;
    }
    public BigDecimal getExtendedPrice() {
        return extendedPrice;
    }
    public BigDecimal getEffectiveTotalDiscount() {
        return effectiveTotalDiscount;
    }
    public BigDecimal getEffectiveStandardDiscount() {
        return effectiveStandardDiscount;
    }
    public BigDecimal getEtdAmount() {
        return etdAmount;
    }
    public BigDecimal getEsdAmount() {
        return esdAmount;
    }
    public BigDecimal getAlternateNetPrice() {
        return alternateNetPrice;
    }
    public BigDecimal getAlternateExtendedPrice() {
        return alternateExtendedPrice;
    }
    public BigDecimal getAlternateTotalDiscountPerc() {
        return alternateTotalDiscountPerc;
    }
    public BigDecimal getAlternateTotalDiscountAmt() {
        return alternateTotalDiscountAmt;
    }
    public BigDecimal getCalcExtendedCreditAmount() {
        return calcExtendedCreditAmount;
    }
    public BigDecimal getNotToExceedAmount() {
        return notToExceedAmount;
    }
    public com.cisco.mcm.genJava.XxcssIlErrorMessageObj getStatusDetails() {
        return statusDetails;
    }
    public String getEuFlag() {
        return euFlag;
    }
    public BigDecimal getDestCustNumber() {
        return destCustNumber;
    }
    public String getChannelProgram() {
        return channelProgram;
    }
    public String getInstallAtTheater() {
        return installAtTheater;
    }
    public String getInstallAtGeo() {
        return installAtGeo;
    }
    public String getMnqDestEligibleFlag() {
        return mnqDestEligibleFlag;
    }
    public String getAttribute1() {
        return attribute1;
    }
    public String getAttribute2() {
        return attribute2;
    }
    public String getAttribute3() {
        return attribute3;
    }
    public String getAttribute4() {
        return attribute4;
    }
    public String getAttribute5() {
        return attribute5;
    }
    public String getAttribute6() {
        return attribute6;
    }
    public String getAttribute7() {
        return attribute7;
    }
    public String getAttribute8() {
        return attribute8;
    }
    public String getAttribute9() {
        return attribute9;
    }
    public String getAttribute10() {
        return attribute10;
    }

    // setter methods                       
    public void setTransactionHeaderId(BigDecimal aTransactionHeaderId) {
        transactionHeaderId = aTransactionHeaderId;
    }
    public void setTransactionNumber(String aTransactionNumber) {
        transactionNumber = aTransactionNumber;
    }
    public void setTransactionLineId(BigDecimal aTransactionLineId) {
        transactionLineId = aTransactionLineId;
    }
    public void setTransactionLineNumber(String aTransactionLineNumber) {
        transactionLineNumber = aTransactionLineNumber;
    }
    public void setTransactionLineIndex(BigDecimal aTransactionLineIndex) {
        transactionLineIndex = aTransactionLineIndex;
    }
    public void setParentLineNumber(String aParentLineNumber) {
        parentLineNumber = aParentLineNumber;
    }
    public void setProductSku(String aProductSku) {
        productSku = aProductSku;
    }
    public void setProductSkuId(BigDecimal aProductSkuId) {
        productSkuId = aProductSkuId;
    }
    public void setServiceLevel(String aServiceLevel) {
        serviceLevel = aServiceLevel;
    }
    public void setServiceSku(String aServiceSku) {
        serviceSku = aServiceSku;
    }
    public void setServiceSkuId(BigDecimal aServiceSkuId) {
        serviceSkuId = aServiceSkuId;
    }
    public void setQty(BigDecimal aQty) {
        qty = aQty;
    }
    public void setPricingDate(Timestamp aPricingDate) {
        pricingDate = aPricingDate;
    }
    public void setLineStartDate(Timestamp aLineStartDate) {
        lineStartDate = aLineStartDate;
    }
    public void setLineEndDate(Timestamp aLineEndDate) {
        lineEndDate = aLineEndDate;
    }
    public void setPriceListId(BigDecimal aPriceListId) {
        priceListId = aPriceListId;
    }
    public void setIntendedUse(String aIntendedUse) {
        intendedUse = aIntendedUse;
    }
    public void setInstallCountryCode(String aInstallCountryCode) {
        installCountryCode = aInstallCountryCode;
    }
    public void setEndUserCustomerNumber(BigDecimal aEndUserCustomerNumber) {
        endUserCustomerNumber = aEndUserCustomerNumber;
    }
    public void setProductListPrice(BigDecimal aProductListPrice) {
        productListPrice = aProductListPrice;
    }
    public void setProductNetPrice(BigDecimal aProductNetPrice) {
        productNetPrice = aProductNetPrice;
    }
    public void setProductPriceCurrencyCode(String aProductPriceCurrencyCode) {
        productPriceCurrencyCode = aProductPriceCurrencyCode;
    }
    public void setCreditFlag(String aCreditFlag) {
        creditFlag = aCreditFlag;
    }
    public void setOriginalStartDate(Timestamp aOriginalStartDate) {
        originalStartDate = aOriginalStartDate;
    }
    public void setOriginalEndDate(Timestamp aOriginalEndDate) {
        originalEndDate = aOriginalEndDate;
    }
    public void setNewStartDate(Timestamp aNewStartDate) {
        newStartDate = aNewStartDate;
    }
    public void setOriginalServiceListPrice(BigDecimal aOriginalServiceListPrice) {
        originalServiceListPrice = aOriginalServiceListPrice;
    }
    public void setOriginalServiceNetPrice(BigDecimal aOriginalServiceNetPrice) {
        originalServiceNetPrice = aOriginalServiceNetPrice;
    }
    public void setOriginalCurrency(String aOriginalCurrency) {
        originalCurrency = aOriginalCurrency;
    }
    public void setOriginalQty(BigDecimal aOriginalQty) {
        originalQty = aOriginalQty;
    }
    public void setCiqFlag(String aCiqFlag) {
        ciqFlag = aCiqFlag;
    }
    public void setDealId(BigDecimal aDealId) {
        dealId = aDealId;
    }
    public void setRevenueSourceCode(String aRevenueSourceCode) {
        revenueSourceCode = aRevenueSourceCode;
    }
    public void setUserEnteredDiscPercent(BigDecimal aUserEnteredDiscPercent) {
        userEnteredDiscPercent = aUserEnteredDiscPercent;
    }
    public void setUserEnteredDiscAmount(BigDecimal aUserEnteredDiscAmount) {
        userEnteredDiscAmount = aUserEnteredDiscAmount;
    }
    public void setUserEnteredNetPrice(BigDecimal aUserEnteredNetPrice) {
        userEnteredNetPrice = aUserEnteredNetPrice;
    }
    public void setPricingBasis(String aPricingBasis) {
        pricingBasis = aPricingBasis;
    }
    public void setPricingBasisPercentage(BigDecimal aPricingBasisPercentage) {
        pricingBasisPercentage = aPricingBasisPercentage;
    }
    public void setCustomerNumber(BigDecimal aCustomerNumber) {
        customerNumber = aCustomerNumber;
    }
    public void setBillToId(BigDecimal aBillToId) {
        billToId = aBillToId;
    }
    public void setBillToCountryCode(String aBillToCountryCode) {
        billToCountryCode = aBillToCountryCode;
    }
    public void setTransactionCurrencyCode(String aTransactionCurrencyCode) {
        transactionCurrencyCode = aTransactionCurrencyCode;
    }
    public void setPricingMethodCode(String aPricingMethodCode) {
        pricingMethodCode = aPricingMethodCode;
    }
    public void setPriceListName(String aPriceListName) {
        priceListName = aPriceListName;
    }
    public void setPriceListListPrice(BigDecimal aPriceListListPrice) {
        priceListListPrice = aPriceListListPrice;
    }
    public void setPriceListCurrency(String aPriceListCurrency) {
        priceListCurrency = aPriceListCurrency;
    }
    public void setCurrencyConversionRate(BigDecimal aCurrencyConversionRate) {
        currencyConversionRate = aCurrencyConversionRate;
    }
    public void setListPriceDurationQty(BigDecimal aListPriceDurationQty) {
        listPriceDurationQty = aListPriceDurationQty;
    }
    public void setPercentageReferencePrice(BigDecimal aPercentageReferencePrice) {
        percentageReferencePrice = aPercentageReferencePrice;
    }
    public void setPercentageReferenceCurrency(String aPercentageReferenceCurrency) {
        percentageReferenceCurrency = aPercentageReferenceCurrency;
    }
    public void setListPricePercentage(BigDecimal aListPricePercentage) {
        listPricePercentage = aListPricePercentage;
    }
    public void setListPrice(BigDecimal aListPrice) {
        listPrice = aListPrice;
    }
    public void setPdInternalListPrice(BigDecimal aPdInternalListPrice) {
        pdInternalListPrice = aPdInternalListPrice;
    }
    public void setNetPrice(BigDecimal aNetPrice) {
        netPrice = aNetPrice;
    }
    public void setExtendedPrice(BigDecimal aExtendedPrice) {
        extendedPrice = aExtendedPrice;
    }
    public void setEffectiveTotalDiscount(BigDecimal aEffectiveTotalDiscount) {
        effectiveTotalDiscount = aEffectiveTotalDiscount;
    }
    public void setEffectiveStandardDiscount(BigDecimal aEffectiveStandardDiscount) {
        effectiveStandardDiscount = aEffectiveStandardDiscount;
    }
    public void setEtdAmount(BigDecimal aEtdAmount) {
        etdAmount = aEtdAmount;
    }
    public void setEsdAmount(BigDecimal aEsdAmount) {
        esdAmount = aEsdAmount;
    }
    public void setAlternateNetPrice(BigDecimal aAlternateNetPrice) {
        alternateNetPrice = aAlternateNetPrice;
    }
    public void setAlternateExtendedPrice(BigDecimal aAlternateExtendedPrice) {
        alternateExtendedPrice = aAlternateExtendedPrice;
    }
    public void setAlternateTotalDiscountPerc(BigDecimal aAlternateTotalDiscountPerc) {
        alternateTotalDiscountPerc = aAlternateTotalDiscountPerc;
    }
    public void setAlternateTotalDiscountAmt(BigDecimal aAlternateTotalDiscountAmt) {
        alternateTotalDiscountAmt = aAlternateTotalDiscountAmt;
    }
    public void setCalcExtendedCreditAmount(BigDecimal aCalcExtendedCreditAmount) {
        calcExtendedCreditAmount = aCalcExtendedCreditAmount;
    }
    public void setNotToExceedAmount(BigDecimal aNotToExceedAmount) {
        notToExceedAmount = aNotToExceedAmount;
    }
    public void setStatusDetails(com.cisco.mcm.genJava.XxcssIlErrorMessageObj aStatusDetails) {
        statusDetails = aStatusDetails;
    }
    public void setEuFlag(String aEuFlag) {
        euFlag = aEuFlag;
    }
    public void setDestCustNumber(BigDecimal aDestCustNumber) {
        destCustNumber = aDestCustNumber;
    }
    public void setChannelProgram(String aChannelProgram) {
        channelProgram = aChannelProgram;
    }
    public void setInstallAtTheater(String aInstallAtTheater) {
        installAtTheater = aInstallAtTheater;
    }
    public void setInstallAtGeo(String aInstallAtGeo) {
        installAtGeo = aInstallAtGeo;
    }
    public void setMnqDestEligibleFlag(String aMnqDestEligibleFlag) {
        mnqDestEligibleFlag = aMnqDestEligibleFlag;
    }
    public void setAttribute1(String aAttribute1) {
        attribute1 = aAttribute1;
    }
    public void setAttribute2(String aAttribute2) {
        attribute2 = aAttribute2;
    }
    public void setAttribute3(String aAttribute3) {
        attribute3 = aAttribute3;
    }
    public void setAttribute4(String aAttribute4) {
        attribute4 = aAttribute4;
    }
    public void setAttribute5(String aAttribute5) {
        attribute5 = aAttribute5;
    }
    public void setAttribute6(String aAttribute6) {
        attribute6 = aAttribute6;
    }
    public void setAttribute7(String aAttribute7) {
        attribute7 = aAttribute7;
    }
    public void setAttribute8(String aAttribute8) {
        attribute8 = aAttribute8;
    }
    public void setAttribute9(String aAttribute9) {
        attribute9 = aAttribute9;
    }
    public void setAttribute10(String aAttribute10) {
        attribute10 = aAttribute10;
    }


    // other methods
    private static com.cisco.mcm.genJava.XxcssIlErrorMessageObj buildFromStruct(Connection conn,com.cisco.mcm.genJava.XxcssIlErrorMessageObj attribute,STRUCT struct)
        throws SQLException,InstantiationException,IllegalAccessException {
        com.cisco.mcm.genJava.XxcssIlErrorMessageObj obj=null;
        if (struct==null) {   
            obj=null;
        } else {
            if (attribute==null) {
                obj=com.cisco.mcm.genJava.XxcssIlErrorMessageObj.newFromStruct(conn,struct);
            } else {
                obj=attribute;
                obj.loadFromStruct(conn,struct);
            }
        }
        return obj;
    }


    public XxcssQpLineType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        transactionHeaderId=(BigDecimal)attributes[0];
        transactionNumber=(String)attributes[1];
        transactionLineId=(BigDecimal)attributes[2];
        transactionLineNumber=(String)attributes[3];
        transactionLineIndex=(BigDecimal)attributes[4];
        parentLineNumber=(String)attributes[5];
        productSku=(String)attributes[6];
        productSkuId=(BigDecimal)attributes[7];
        serviceLevel=(String)attributes[8];
        serviceSku=(String)attributes[9];
        serviceSkuId=(BigDecimal)attributes[10];
        qty=(BigDecimal)attributes[11];
        pricingDate=(Timestamp)attributes[12];
        lineStartDate=(Timestamp)attributes[13];
        lineEndDate=(Timestamp)attributes[14];
        priceListId=(BigDecimal)attributes[15];
        intendedUse=(String)attributes[16];
        installCountryCode=(String)attributes[17];
        endUserCustomerNumber=(BigDecimal)attributes[18];
        productListPrice=(BigDecimal)attributes[19];
        productNetPrice=(BigDecimal)attributes[20];
        productPriceCurrencyCode=(String)attributes[21];
        creditFlag=(String)attributes[22];
        originalStartDate=(Timestamp)attributes[23];
        originalEndDate=(Timestamp)attributes[24];
        newStartDate=(Timestamp)attributes[25];
        originalServiceListPrice=(BigDecimal)attributes[26];
        originalServiceNetPrice=(BigDecimal)attributes[27];
        originalCurrency=(String)attributes[28];
        originalQty=(BigDecimal)attributes[29];
        ciqFlag=(String)attributes[30];
        dealId=(BigDecimal)attributes[31];
        revenueSourceCode=(String)attributes[32];
        userEnteredDiscPercent=(BigDecimal)attributes[33];
        userEnteredDiscAmount=(BigDecimal)attributes[34];
        userEnteredNetPrice=(BigDecimal)attributes[35];
        pricingBasis=(String)attributes[36];
        pricingBasisPercentage=(BigDecimal)attributes[37];
        customerNumber=(BigDecimal)attributes[38];
        billToId=(BigDecimal)attributes[39];
        billToCountryCode=(String)attributes[40];
        transactionCurrencyCode=(String)attributes[41];
        pricingMethodCode=(String)attributes[42];
        priceListName=(String)attributes[43];
        priceListListPrice=(BigDecimal)attributes[44];
        priceListCurrency=(String)attributes[45];
        currencyConversionRate=(BigDecimal)attributes[46];
        listPriceDurationQty=(BigDecimal)attributes[47];
        percentageReferencePrice=(BigDecimal)attributes[48];
        percentageReferenceCurrency=(String)attributes[49];
        listPricePercentage=(BigDecimal)attributes[50];
        listPrice=(BigDecimal)attributes[51];
        pdInternalListPrice=(BigDecimal)attributes[52];
        netPrice=(BigDecimal)attributes[53];
        extendedPrice=(BigDecimal)attributes[54];
        effectiveTotalDiscount=(BigDecimal)attributes[55];
        effectiveStandardDiscount=(BigDecimal)attributes[56];
        etdAmount=(BigDecimal)attributes[57];
        esdAmount=(BigDecimal)attributes[58];
        alternateNetPrice=(BigDecimal)attributes[59];
        alternateExtendedPrice=(BigDecimal)attributes[60];
        alternateTotalDiscountPerc=(BigDecimal)attributes[61];
        alternateTotalDiscountAmt=(BigDecimal)attributes[62];
        calcExtendedCreditAmount=(BigDecimal)attributes[63];
        notToExceedAmount=(BigDecimal)attributes[64];
        statusDetails=buildFromStruct(conn,statusDetails,(STRUCT)attributes[65]);
        euFlag=(String)attributes[66];
        destCustNumber=(BigDecimal)attributes[67];
        channelProgram=(String)attributes[68];
        installAtTheater=(String)attributes[69];
        installAtGeo=(String)attributes[70];
        mnqDestEligibleFlag=(String)attributes[71];
        attribute1=(String)attributes[72];
        attribute2=(String)attributes[73];
        attribute3=(String)attributes[74];
        attribute4=(String)attributes[75];
        attribute5=(String)attributes[76];
        attribute6=(String)attributes[77];
        attribute7=(String)attributes[78];
        attribute8=(String)attributes[79];
        attribute9=(String)attributes[80];
        attribute10=(String)attributes[81];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_QP_LINE_TYPE",conn);
        Object[] attributes = new Object[]{
            transactionHeaderId,
            ((transactionNumber==null) ? null : new CHAR(transactionNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            transactionLineId,
            ((transactionLineNumber==null) ? null : new CHAR(transactionLineNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            transactionLineIndex,
            ((parentLineNumber==null) ? null : new CHAR(parentLineNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((productSku==null) ? null : new CHAR(productSku,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            productSkuId,
            ((serviceLevel==null) ? null : new CHAR(serviceLevel,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((serviceSku==null) ? null : new CHAR(serviceSku,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            serviceSkuId,
            qty,
            pricingDate,
            lineStartDate,
            lineEndDate,
            priceListId,
            ((intendedUse==null) ? null : new CHAR(intendedUse,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((installCountryCode==null) ? null : new CHAR(installCountryCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            endUserCustomerNumber,
            productListPrice,
            productNetPrice,
            ((productPriceCurrencyCode==null) ? null : new CHAR(productPriceCurrencyCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((creditFlag==null) ? null : new CHAR(creditFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            originalStartDate,
            originalEndDate,
            newStartDate,
            originalServiceListPrice,
            originalServiceNetPrice,
            ((originalCurrency==null) ? null : new CHAR(originalCurrency,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            originalQty,
            ((ciqFlag==null) ? null : new CHAR(ciqFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            dealId,
            ((revenueSourceCode==null) ? null : new CHAR(revenueSourceCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            userEnteredDiscPercent,
            userEnteredDiscAmount,
            userEnteredNetPrice,
            ((pricingBasis==null) ? null : new CHAR(pricingBasis,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            pricingBasisPercentage,
            customerNumber,
            billToId,
            ((billToCountryCode==null) ? null : new CHAR(billToCountryCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((transactionCurrencyCode==null) ? null : new CHAR(transactionCurrencyCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((pricingMethodCode==null) ? null : new CHAR(pricingMethodCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((priceListName==null) ? null : new CHAR(priceListName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            priceListListPrice,
            ((priceListCurrency==null) ? null : new CHAR(priceListCurrency,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            currencyConversionRate,
            listPriceDurationQty,
            percentageReferencePrice,
            ((percentageReferenceCurrency==null) ? null : new CHAR(percentageReferenceCurrency,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            listPricePercentage,
            listPrice,
            pdInternalListPrice,
            netPrice,
            extendedPrice,
            effectiveTotalDiscount,
            effectiveStandardDiscount,
            etdAmount,
            esdAmount,
            alternateNetPrice,
            alternateExtendedPrice,
            alternateTotalDiscountPerc,
            alternateTotalDiscountAmt,
            calcExtendedCreditAmount,
            notToExceedAmount,
            ((statusDetails!=null) ? statusDetails.asStruct(conn) : null),
            ((euFlag==null) ? null : new CHAR(euFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            destCustNumber,
            ((channelProgram==null) ? null : new CHAR(channelProgram,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((installAtTheater==null) ? null : new CHAR(installAtTheater,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((installAtGeo==null) ? null : new CHAR(installAtGeo,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((mnqDestEligibleFlag==null) ? null : new CHAR(mnqDestEligibleFlag,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute1==null) ? null : new CHAR(attribute1,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute2==null) ? null : new CHAR(attribute2,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute3==null) ? null : new CHAR(attribute3,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute4==null) ? null : new CHAR(attribute4,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute5==null) ? null : new CHAR(attribute5,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute6==null) ? null : new CHAR(attribute6,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute7==null) ? null : new CHAR(attribute7,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute8==null) ? null : new CHAR(attribute8,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute9==null) ? null : new CHAR(attribute9,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((attribute10==null) ? null : new CHAR(attribute10,CharacterSet.make(CharacterSet.UTF8_CHARSET)))
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssQpLineType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssQpLineType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("transactionHeaderId=").append(transactionHeaderId);
        sb.append(",transactionNumber=").append(transactionNumber);
        sb.append(",transactionLineId=").append(transactionLineId);
        sb.append(",transactionLineNumber=").append(transactionLineNumber);
        sb.append(",transactionLineIndex=").append(transactionLineIndex);
        sb.append(",parentLineNumber=").append(parentLineNumber);
        sb.append(",productSku=").append(productSku);
        sb.append(",productSkuId=").append(productSkuId);
        sb.append(",serviceLevel=").append(serviceLevel);
        sb.append(",serviceSku=").append(serviceSku);
        sb.append(",serviceSkuId=").append(serviceSkuId);
        sb.append(",qty=").append(qty);
        sb.append(",pricingDate=").append(pricingDate);
        sb.append(",lineStartDate=").append(lineStartDate);
        sb.append(",lineEndDate=").append(lineEndDate);
        sb.append(",priceListId=").append(priceListId);
        sb.append(",intendedUse=").append(intendedUse);
        sb.append(",installCountryCode=").append(installCountryCode);
        sb.append(",endUserCustomerNumber=").append(endUserCustomerNumber);
        sb.append(",productListPrice=").append(productListPrice);
        sb.append(",productNetPrice=").append(productNetPrice);
        sb.append(",productPriceCurrencyCode=").append(productPriceCurrencyCode);
        sb.append(",creditFlag=").append(creditFlag);
        sb.append(",originalStartDate=").append(originalStartDate);
        sb.append(",originalEndDate=").append(originalEndDate);
        sb.append(",newStartDate=").append(newStartDate);
        sb.append(",originalServiceListPrice=").append(originalServiceListPrice);
        sb.append(",originalServiceNetPrice=").append(originalServiceNetPrice);
        sb.append(",originalCurrency=").append(originalCurrency);
        sb.append(",originalQty=").append(originalQty);
        sb.append(",ciqFlag=").append(ciqFlag);
        sb.append(",dealId=").append(dealId);
        sb.append(",revenueSourceCode=").append(revenueSourceCode);
        sb.append(",userEnteredDiscPercent=").append(userEnteredDiscPercent);
        sb.append(",userEnteredDiscAmount=").append(userEnteredDiscAmount);
        sb.append(",userEnteredNetPrice=").append(userEnteredNetPrice);
        sb.append(",pricingBasis=").append(pricingBasis);
        sb.append(",pricingBasisPercentage=").append(pricingBasisPercentage);
        sb.append(",customerNumber=").append(customerNumber);
        sb.append(",billToId=").append(billToId);
        sb.append(",billToCountryCode=").append(billToCountryCode);
        sb.append(",transactionCurrencyCode=").append(transactionCurrencyCode);
        sb.append(",pricingMethodCode=").append(pricingMethodCode);
        sb.append(",priceListName=").append(priceListName);
        sb.append(",priceListListPrice=").append(priceListListPrice);
        sb.append(",priceListCurrency=").append(priceListCurrency);
        sb.append(",currencyConversionRate=").append(currencyConversionRate);
        sb.append(",listPriceDurationQty=").append(listPriceDurationQty);
        sb.append(",percentageReferencePrice=").append(percentageReferencePrice);
        sb.append(",percentageReferenceCurrency=").append(percentageReferenceCurrency);
        sb.append(",listPricePercentage=").append(listPricePercentage);
        sb.append(",listPrice=").append(listPrice);
        sb.append(",pdInternalListPrice=").append(pdInternalListPrice);
        sb.append(",netPrice=").append(netPrice);
        sb.append(",extendedPrice=").append(extendedPrice);
        sb.append(",effectiveTotalDiscount=").append(effectiveTotalDiscount);
        sb.append(",effectiveStandardDiscount=").append(effectiveStandardDiscount);
        sb.append(",etdAmount=").append(etdAmount);
        sb.append(",esdAmount=").append(esdAmount);
        sb.append(",alternateNetPrice=").append(alternateNetPrice);
        sb.append(",alternateExtendedPrice=").append(alternateExtendedPrice);
        sb.append(",alternateTotalDiscountPerc=").append(alternateTotalDiscountPerc);
        sb.append(",alternateTotalDiscountAmt=").append(alternateTotalDiscountAmt);
        sb.append(",calcExtendedCreditAmount=").append(calcExtendedCreditAmount);
        sb.append(",notToExceedAmount=").append(notToExceedAmount);
        sb.append(",statusDetails=").append(statusDetails);
        sb.append(",euFlag=").append(euFlag);
        sb.append(",destCustNumber=").append(destCustNumber);
        sb.append(",channelProgram=").append(channelProgram);
        sb.append(",installAtTheater=").append(installAtTheater);
        sb.append(",installAtGeo=").append(installAtGeo);
        sb.append(",mnqDestEligibleFlag=").append(mnqDestEligibleFlag);
        sb.append(",attribute1=").append(attribute1);
        sb.append(",attribute2=").append(attribute2);
        sb.append(",attribute3=").append(attribute3);
        sb.append(",attribute4=").append(attribute4);
        sb.append(",attribute5=").append(attribute5);
        sb.append(",attribute6=").append(attribute6);
        sb.append(",attribute7=").append(attribute7);
        sb.append(",attribute8=").append(attribute8);
        sb.append(",attribute9=").append(attribute9);
        sb.append(",attribute10=").append(attribute10);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssQpLineType theClone = (XxcssQpLineType) super.clone();
        
        theClone.setStatusDetails((statusDetails==null) ? null : (com.cisco.mcm.genJava.XxcssIlErrorMessageObj) statusDetails.clone());


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("transactionHeaderId=").append(transactionHeaderId);
        hashStringBuffer.append("transactionNumber=").append(transactionNumber);
        hashStringBuffer.append("transactionLineId=").append(transactionLineId);
        hashStringBuffer.append("transactionLineNumber=").append(transactionLineNumber);
        hashStringBuffer.append("transactionLineIndex=").append(transactionLineIndex);
        hashStringBuffer.append("parentLineNumber=").append(parentLineNumber);
        hashStringBuffer.append("productSku=").append(productSku);
        hashStringBuffer.append("productSkuId=").append(productSkuId);
        hashStringBuffer.append("serviceLevel=").append(serviceLevel);
        hashStringBuffer.append("serviceSku=").append(serviceSku);
        hashStringBuffer.append("serviceSkuId=").append(serviceSkuId);
        hashStringBuffer.append("qty=").append(qty);
        hashStringBuffer.append("pricingDate=").append(pricingDate);
        hashStringBuffer.append("lineStartDate=").append(lineStartDate);
        hashStringBuffer.append("lineEndDate=").append(lineEndDate);
        hashStringBuffer.append("priceListId=").append(priceListId);
        hashStringBuffer.append("intendedUse=").append(intendedUse);
        hashStringBuffer.append("installCountryCode=").append(installCountryCode);
        hashStringBuffer.append("endUserCustomerNumber=").append(endUserCustomerNumber);
        hashStringBuffer.append("productListPrice=").append(productListPrice);
        hashStringBuffer.append("productNetPrice=").append(productNetPrice);
        hashStringBuffer.append("productPriceCurrencyCode=").append(productPriceCurrencyCode);
        hashStringBuffer.append("creditFlag=").append(creditFlag);
        hashStringBuffer.append("originalStartDate=").append(originalStartDate);
        hashStringBuffer.append("originalEndDate=").append(originalEndDate);
        hashStringBuffer.append("newStartDate=").append(newStartDate);
        hashStringBuffer.append("originalServiceListPrice=").append(originalServiceListPrice);
        hashStringBuffer.append("originalServiceNetPrice=").append(originalServiceNetPrice);
        hashStringBuffer.append("originalCurrency=").append(originalCurrency);
        hashStringBuffer.append("originalQty=").append(originalQty);
        hashStringBuffer.append("ciqFlag=").append(ciqFlag);
        hashStringBuffer.append("dealId=").append(dealId);
        hashStringBuffer.append("revenueSourceCode=").append(revenueSourceCode);
        hashStringBuffer.append("userEnteredDiscPercent=").append(userEnteredDiscPercent);
        hashStringBuffer.append("userEnteredDiscAmount=").append(userEnteredDiscAmount);
        hashStringBuffer.append("userEnteredNetPrice=").append(userEnteredNetPrice);
        hashStringBuffer.append("pricingBasis=").append(pricingBasis);
        hashStringBuffer.append("pricingBasisPercentage=").append(pricingBasisPercentage);
        hashStringBuffer.append("customerNumber=").append(customerNumber);
        hashStringBuffer.append("billToId=").append(billToId);
        hashStringBuffer.append("billToCountryCode=").append(billToCountryCode);
        hashStringBuffer.append("transactionCurrencyCode=").append(transactionCurrencyCode);
        hashStringBuffer.append("pricingMethodCode=").append(pricingMethodCode);
        hashStringBuffer.append("priceListName=").append(priceListName);
        hashStringBuffer.append("priceListListPrice=").append(priceListListPrice);
        hashStringBuffer.append("priceListCurrency=").append(priceListCurrency);
        hashStringBuffer.append("currencyConversionRate=").append(currencyConversionRate);
        hashStringBuffer.append("listPriceDurationQty=").append(listPriceDurationQty);
        hashStringBuffer.append("percentageReferencePrice=").append(percentageReferencePrice);
        hashStringBuffer.append("percentageReferenceCurrency=").append(percentageReferenceCurrency);
        hashStringBuffer.append("listPricePercentage=").append(listPricePercentage);
        hashStringBuffer.append("listPrice=").append(listPrice);
        hashStringBuffer.append("pdInternalListPrice=").append(pdInternalListPrice);
        hashStringBuffer.append("netPrice=").append(netPrice);
        hashStringBuffer.append("extendedPrice=").append(extendedPrice);
        hashStringBuffer.append("effectiveTotalDiscount=").append(effectiveTotalDiscount);
        hashStringBuffer.append("effectiveStandardDiscount=").append(effectiveStandardDiscount);
        hashStringBuffer.append("etdAmount=").append(etdAmount);
        hashStringBuffer.append("esdAmount=").append(esdAmount);
        hashStringBuffer.append("alternateNetPrice=").append(alternateNetPrice);
        hashStringBuffer.append("alternateExtendedPrice=").append(alternateExtendedPrice);
        hashStringBuffer.append("alternateTotalDiscountPerc=").append(alternateTotalDiscountPerc);
        hashStringBuffer.append("alternateTotalDiscountAmt=").append(alternateTotalDiscountAmt);
        hashStringBuffer.append("calcExtendedCreditAmount=").append(calcExtendedCreditAmount);
        hashStringBuffer.append("notToExceedAmount=").append(notToExceedAmount);
        hashStringBuffer.append((statusDetails==null) ? "null" : statusDetails.hashCode()+"");
        hashStringBuffer.append("euFlag=").append(euFlag);
        hashStringBuffer.append("destCustNumber=").append(destCustNumber);
        hashStringBuffer.append("channelProgram=").append(channelProgram);
        hashStringBuffer.append("installAtTheater=").append(installAtTheater);
        hashStringBuffer.append("installAtGeo=").append(installAtGeo);
        hashStringBuffer.append("mnqDestEligibleFlag=").append(mnqDestEligibleFlag);
        hashStringBuffer.append("attribute1=").append(attribute1);
        hashStringBuffer.append("attribute2=").append(attribute2);
        hashStringBuffer.append("attribute3=").append(attribute3);
        hashStringBuffer.append("attribute4=").append(attribute4);
        hashStringBuffer.append("attribute5=").append(attribute5);
        hashStringBuffer.append("attribute6=").append(attribute6);
        hashStringBuffer.append("attribute7=").append(attribute7);
        hashStringBuffer.append("attribute8=").append(attribute8);
        hashStringBuffer.append("attribute9=").append(attribute9);
        hashStringBuffer.append("attribute10=").append(attribute10);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
