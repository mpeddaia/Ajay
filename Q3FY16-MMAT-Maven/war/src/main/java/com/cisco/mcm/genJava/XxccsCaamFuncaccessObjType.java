/*****************************************************************************
 * XxccsCaamFuncaccessObjType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxccsCaamFuncaccessObjType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxccsCaamFuncaccessObjType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxccsCaamFuncaccessObjType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxccsCaamFuncaccessObjType) factoryClass.newInstance();
    }

public XxccsCaamFuncaccessObjType() {
        responsibility=MISSING_CHAR;
        responsibilityDesc=MISSING_CHAR;
        primaryResponsibility=MISSING_CHAR;
        applicationShortName=MISSING_CHAR;
        functionValue=MISSING_CHAR;
        functionDescription=MISSING_CHAR;
        functionType=MISSING_CHAR;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private String responsibility;
    private String responsibilityDesc;
    private String primaryResponsibility;
    private String applicationShortName;
    private String functionValue;
    private String functionDescription;
    private String functionType;


    // getter methods
    public String getResponsibility() {
        return responsibility;
    }
    public String getResponsibilityDesc() {
        return responsibilityDesc;
    }
    public String getPrimaryResponsibility() {
        return primaryResponsibility;
    }
    public String getApplicationShortName() {
        return applicationShortName;
    }
    public String getFunctionValue() {
        return functionValue;
    }
    public String getFunctionDescription() {
        return functionDescription;
    }
    public String getFunctionType() {
        return functionType;
    }

    // setter methods                       
    public void setResponsibility(String aResponsibility) {
        responsibility = aResponsibility;
    }
    public void setResponsibilityDesc(String aResponsibilityDesc) {
        responsibilityDesc = aResponsibilityDesc;
    }
    public void setPrimaryResponsibility(String aPrimaryResponsibility) {
        primaryResponsibility = aPrimaryResponsibility;
    }
    public void setApplicationShortName(String aApplicationShortName) {
        applicationShortName = aApplicationShortName;
    }
    public void setFunctionValue(String aFunctionValue) {
        functionValue = aFunctionValue;
    }
    public void setFunctionDescription(String aFunctionDescription) {
        functionDescription = aFunctionDescription;
    }
    public void setFunctionType(String aFunctionType) {
        functionType = aFunctionType;
    }


    // other methods


    public XxccsCaamFuncaccessObjType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        responsibility=(String)attributes[0];
        responsibilityDesc=(String)attributes[1];
        primaryResponsibility=(String)attributes[2];
        applicationShortName=(String)attributes[3];
        functionValue=(String)attributes[4];
        functionDescription=(String)attributes[5];
        functionType=(String)attributes[6];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCCS_CAAM_FUNCACCESS_OBJ_TYPE",conn);
        Object[] attributes = new Object[]{
            ((responsibility==null) ? null : new CHAR(responsibility,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((responsibilityDesc==null) ? null : new CHAR(responsibilityDesc,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((primaryResponsibility==null) ? null : new CHAR(primaryResponsibility,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((applicationShortName==null) ? null : new CHAR(applicationShortName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((functionValue==null) ? null : new CHAR(functionValue,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((functionDescription==null) ? null : new CHAR(functionDescription,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((functionType==null) ? null : new CHAR(functionType,CharacterSet.make(CharacterSet.UTF8_CHARSET)))
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxccsCaamFuncaccessObjType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxccsCaamFuncaccessObjType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("responsibility=").append(responsibility);
        sb.append(",responsibilityDesc=").append(responsibilityDesc);
        sb.append(",primaryResponsibility=").append(primaryResponsibility);
        sb.append(",applicationShortName=").append(applicationShortName);
        sb.append(",functionValue=").append(functionValue);
        sb.append(",functionDescription=").append(functionDescription);
        sb.append(",functionType=").append(functionType);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxccsCaamFuncaccessObjType theClone = (XxccsCaamFuncaccessObjType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("responsibility=").append(responsibility);
        hashStringBuffer.append("responsibilityDesc=").append(responsibilityDesc);
        hashStringBuffer.append("primaryResponsibility=").append(primaryResponsibility);
        hashStringBuffer.append("applicationShortName=").append(applicationShortName);
        hashStringBuffer.append("functionValue=").append(functionValue);
        hashStringBuffer.append("functionDescription=").append(functionDescription);
        hashStringBuffer.append("functionType=").append(functionType);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
