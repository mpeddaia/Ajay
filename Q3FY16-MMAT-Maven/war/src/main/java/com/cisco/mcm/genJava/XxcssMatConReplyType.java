/*****************************************************************************
 * XxcssMatConReplyType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssMatConReplyType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssMatConReplyType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssMatConReplyType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssMatConReplyType) factoryClass.newInstance();
    }

public XxcssMatConReplyType() {
        requestNumber=MISSING_NUM;
        contractNumber=MISSING_CHAR;
        contractId=MISSING_NUM;
        contractStatus=MISSING_CHAR;
        contractStartDate=MISSING_DATE;
        contractEndDate=MISSING_DATE;
        contractPriceType=MISSING_CHAR;
        contractRefNumber=MISSING_CHAR;
        currencyCode=MISSING_CHAR;
        contractBilltoLoc=MISSING_CHAR;
        svcStatus=MISSING_CHAR;
        svcStartDate=MISSING_DATE;
        svcEndDate=MISSING_DATE;
        svcLevel=MISSING_CHAR;
        svcLevelDesc=MISSING_CHAR;
        svcLineCount=MISSING_NUM;
        svcLineId=MISSING_NUM;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal requestNumber;
    private String contractNumber;
    private BigDecimal contractId;
    private String contractStatus;
    private Timestamp contractStartDate;
    private Timestamp contractEndDate;
    private String contractPriceType;
    private String contractRefNumber;
    private String currencyCode;
    private String contractBilltoLoc;
    private String svcStatus;
    private Timestamp svcStartDate;
    private Timestamp svcEndDate;
    private String svcLevel;
    private String svcLevelDesc;
    private BigDecimal svcLineCount;
    private BigDecimal svcLineId;


    // getter methods
    public BigDecimal getRequestNumber() {
        return requestNumber;
    }
    public String getContractNumber() {
        return contractNumber;
    }
    public BigDecimal getContractId() {
        return contractId;
    }
    public String getContractStatus() {
        return contractStatus;
    }
    public Timestamp getContractStartDate() {
        return contractStartDate;
    }
    public Timestamp getContractEndDate() {
        return contractEndDate;
    }
    public String getContractPriceType() {
        return contractPriceType;
    }
    public String getContractRefNumber() {
        return contractRefNumber;
    }
    public String getCurrencyCode() {
        return currencyCode;
    }
    public String getContractBilltoLoc() {
        return contractBilltoLoc;
    }
    public String getSvcStatus() {
        return svcStatus;
    }
    public Timestamp getSvcStartDate() {
        return svcStartDate;
    }
    public Timestamp getSvcEndDate() {
        return svcEndDate;
    }
    public String getSvcLevel() {
        return svcLevel;
    }
    public String getSvcLevelDesc() {
        return svcLevelDesc;
    }
    public BigDecimal getSvcLineCount() {
        return svcLineCount;
    }
    public BigDecimal getSvcLineId() {
        return svcLineId;
    }

    // setter methods                       
    public void setRequestNumber(BigDecimal aRequestNumber) {
        requestNumber = aRequestNumber;
    }
    public void setContractNumber(String aContractNumber) {
        contractNumber = aContractNumber;
    }
    public void setContractId(BigDecimal aContractId) {
        contractId = aContractId;
    }
    public void setContractStatus(String aContractStatus) {
        contractStatus = aContractStatus;
    }
    public void setContractStartDate(Timestamp aContractStartDate) {
        contractStartDate = aContractStartDate;
    }
    public void setContractEndDate(Timestamp aContractEndDate) {
        contractEndDate = aContractEndDate;
    }
    public void setContractPriceType(String aContractPriceType) {
        contractPriceType = aContractPriceType;
    }
    public void setContractRefNumber(String aContractRefNumber) {
        contractRefNumber = aContractRefNumber;
    }
    public void setCurrencyCode(String aCurrencyCode) {
        currencyCode = aCurrencyCode;
    }
    public void setContractBilltoLoc(String aContractBilltoLoc) {
        contractBilltoLoc = aContractBilltoLoc;
    }
    public void setSvcStatus(String aSvcStatus) {
        svcStatus = aSvcStatus;
    }
    public void setSvcStartDate(Timestamp aSvcStartDate) {
        svcStartDate = aSvcStartDate;
    }
    public void setSvcEndDate(Timestamp aSvcEndDate) {
        svcEndDate = aSvcEndDate;
    }
    public void setSvcLevel(String aSvcLevel) {
        svcLevel = aSvcLevel;
    }
    public void setSvcLevelDesc(String aSvcLevelDesc) {
        svcLevelDesc = aSvcLevelDesc;
    }
    public void setSvcLineCount(BigDecimal aSvcLineCount) {
        svcLineCount = aSvcLineCount;
    }
    public void setSvcLineId(BigDecimal aSvcLineId) {
        svcLineId = aSvcLineId;
    }


    // other methods


    public XxcssMatConReplyType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        requestNumber=(BigDecimal)attributes[0];
        contractNumber=(String)attributes[1];
        contractId=(BigDecimal)attributes[2];
        contractStatus=(String)attributes[3];
        contractStartDate=(Timestamp)attributes[4];
        contractEndDate=(Timestamp)attributes[5];
        contractPriceType=(String)attributes[6];
        contractRefNumber=(String)attributes[7];
        currencyCode=(String)attributes[8];
        contractBilltoLoc=(String)attributes[9];
        svcStatus=(String)attributes[10];
        svcStartDate=(Timestamp)attributes[11];
        svcEndDate=(Timestamp)attributes[12];
        svcLevel=(String)attributes[13];
        svcLevelDesc=(String)attributes[14];
        svcLineCount=(BigDecimal)attributes[15];
        svcLineId=(BigDecimal)attributes[16];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_MAT_CON_REPLY_TYPE",conn);
        Object[] attributes = new Object[]{
            requestNumber,
            ((contractNumber==null) ? null : new CHAR(contractNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            contractId,
            ((contractStatus==null) ? null : new CHAR(contractStatus,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            contractStartDate,
            contractEndDate,
            ((contractPriceType==null) ? null : new CHAR(contractPriceType,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((contractRefNumber==null) ? null : new CHAR(contractRefNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((currencyCode==null) ? null : new CHAR(currencyCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((contractBilltoLoc==null) ? null : new CHAR(contractBilltoLoc,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((svcStatus==null) ? null : new CHAR(svcStatus,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            svcStartDate,
            svcEndDate,
            ((svcLevel==null) ? null : new CHAR(svcLevel,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((svcLevelDesc==null) ? null : new CHAR(svcLevelDesc,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            svcLineCount,
            svcLineId
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssMatConReplyType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssMatConReplyType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("requestNumber=").append(requestNumber);
        sb.append(",contractNumber=").append(contractNumber);
        sb.append(",contractId=").append(contractId);
        sb.append(",contractStatus=").append(contractStatus);
        sb.append(",contractStartDate=").append(contractStartDate);
        sb.append(",contractEndDate=").append(contractEndDate);
        sb.append(",contractPriceType=").append(contractPriceType);
        sb.append(",contractRefNumber=").append(contractRefNumber);
        sb.append(",currencyCode=").append(currencyCode);
        sb.append(",contractBilltoLoc=").append(contractBilltoLoc);
        sb.append(",svcStatus=").append(svcStatus);
        sb.append(",svcStartDate=").append(svcStartDate);
        sb.append(",svcEndDate=").append(svcEndDate);
        sb.append(",svcLevel=").append(svcLevel);
        sb.append(",svcLevelDesc=").append(svcLevelDesc);
        sb.append(",svcLineCount=").append(svcLineCount);
        sb.append(",svcLineId=").append(svcLineId);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssMatConReplyType theClone = (XxcssMatConReplyType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("requestNumber=").append(requestNumber);
        hashStringBuffer.append("contractNumber=").append(contractNumber);
        hashStringBuffer.append("contractId=").append(contractId);
        hashStringBuffer.append("contractStatus=").append(contractStatus);
        hashStringBuffer.append("contractStartDate=").append(contractStartDate);
        hashStringBuffer.append("contractEndDate=").append(contractEndDate);
        hashStringBuffer.append("contractPriceType=").append(contractPriceType);
        hashStringBuffer.append("contractRefNumber=").append(contractRefNumber);
        hashStringBuffer.append("currencyCode=").append(currencyCode);
        hashStringBuffer.append("contractBilltoLoc=").append(contractBilltoLoc);
        hashStringBuffer.append("svcStatus=").append(svcStatus);
        hashStringBuffer.append("svcStartDate=").append(svcStartDate);
        hashStringBuffer.append("svcEndDate=").append(svcEndDate);
        hashStringBuffer.append("svcLevel=").append(svcLevel);
        hashStringBuffer.append("svcLevelDesc=").append(svcLevelDesc);
        hashStringBuffer.append("svcLineCount=").append(svcLineCount);
        hashStringBuffer.append("svcLineId=").append(svcLineId);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
