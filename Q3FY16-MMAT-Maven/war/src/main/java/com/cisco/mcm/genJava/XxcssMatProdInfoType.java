/*****************************************************************************
 * XxcssMatProdInfoType.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.GregorianCalendar;

import oracle.sql.CHAR;
import oracle.sql.CharacterSet;
import oracle.sql.STRUCT;
import oracle.sql.StructDescriptor;


/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 
public class XxcssMatProdInfoType 
/* BEGIN PROTECT_BLOCK user_extends */
/* END PROTECT_BLOCK user_extends */

implements java.io.Serializable,Cloneable 
/* BEGIN PROTECT_BLOCK user_implements */
/* END PROTECT_BLOCK user_implements */

{



    public static java.sql.Timestamp MISSING_DATE;
    public static final BigDecimal MISSING_NUM=new BigDecimal("9.99E125");
    public static final String MISSING_CHAR=new String(new byte[]{0});
    public static Class factoryClass = XxcssMatProdInfoType.class;

    static {     
        GregorianCalendar gc = new GregorianCalendar(4713,0,1);
        gc.set(GregorianCalendar.ERA,GregorianCalendar.BC);
        java.util.Date d=gc.getTime();
        MISSING_DATE=new java.sql.Timestamp(d.getTime());
    };

    public static void setFactoryClass(Class aFactoryClass) {
        factoryClass = aFactoryClass;
    }
    
    public static XxcssMatProdInfoType newInstance()
        throws InstantiationException, IllegalAccessException {
        return (XxcssMatProdInfoType) factoryClass.newInstance();
    }

public XxcssMatProdInfoType() {
        instanceId=MISSING_NUM;
        serialNumber=MISSING_CHAR;
        inputProductName=MISSING_CHAR;
        ibProductName=MISSING_CHAR;
        productStatus=MISSING_CHAR;
        installLocationTypeCode=MISSING_CHAR;
        installLocationId=MISSING_NUM;
        location=MISSING_CHAR;
        productFamily=MISSING_CHAR;
        instanceQuantity=MISSING_NUM;
        snFound=MISSING_CHAR;
        pnFound=MISSING_CHAR;
        snPnFound=MISSING_CHAR;
        snPfFound=MISSING_CHAR;
        inventoryItemId=MISSING_NUM;

/* BEGIN PROTECT_BLOCK user_default_constructor_code */
/* END PROTECT_BLOCK user_default_constructor_code */

}

/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */


    private BigDecimal instanceId;
    private String serialNumber;
    private String inputProductName;
    private String ibProductName;
    private String productStatus;
    private String installLocationTypeCode;
    private BigDecimal installLocationId;
    private String location;
    private String productFamily;
    private BigDecimal instanceQuantity;
    private String snFound;
    private String pnFound;
    private String snPnFound;
    private String snPfFound;
    private BigDecimal inventoryItemId;


    // getter methods
    public BigDecimal getInstanceId() {
        return instanceId;
    }
    public String getSerialNumber() {
        return serialNumber;
    }
    public String getInputProductName() {
        return inputProductName;
    }
    public String getIbProductName() {
        return ibProductName;
    }
    public String getProductStatus() {
        return productStatus;
    }
    public String getInstallLocationTypeCode() {
        return installLocationTypeCode;
    }
    public BigDecimal getInstallLocationId() {
        return installLocationId;
    }
    public String getLocation() {
        return location;
    }
    public String getProductFamily() {
        return productFamily;
    }
    public BigDecimal getInstanceQuantity() {
        return instanceQuantity;
    }
    public String getSnFound() {
        return snFound;
    }
    public String getPnFound() {
        return pnFound;
    }
    public String getSnPnFound() {
        return snPnFound;
    }
    public String getSnPfFound() {
        return snPfFound;
    }
    public BigDecimal getInventoryItemId() {
        return inventoryItemId;
    }

    // setter methods                       
    public void setInstanceId(BigDecimal aInstanceId) {
        instanceId = aInstanceId;
    }
    public void setSerialNumber(String aSerialNumber) {
        serialNumber = aSerialNumber;
    }
    public void setInputProductName(String aInputProductName) {
        inputProductName = aInputProductName;
    }
    public void setIbProductName(String aIbProductName) {
        ibProductName = aIbProductName;
    }
    public void setProductStatus(String aProductStatus) {
        productStatus = aProductStatus;
    }
    public void setInstallLocationTypeCode(String aInstallLocationTypeCode) {
        installLocationTypeCode = aInstallLocationTypeCode;
    }
    public void setInstallLocationId(BigDecimal aInstallLocationId) {
        installLocationId = aInstallLocationId;
    }
    public void setLocation(String aLocation) {
        location = aLocation;
    }
    public void setProductFamily(String aProductFamily) {
        productFamily = aProductFamily;
    }
    public void setInstanceQuantity(BigDecimal aInstanceQuantity) {
        instanceQuantity = aInstanceQuantity;
    }
    public void setSnFound(String aSnFound) {
        snFound = aSnFound;
    }
    public void setPnFound(String aPnFound) {
        pnFound = aPnFound;
    }
    public void setSnPnFound(String aSnPnFound) {
        snPnFound = aSnPnFound;
    }
    public void setSnPfFound(String aSnPfFound) {
        snPfFound = aSnPfFound;
    }
    public void setInventoryItemId(BigDecimal aInventoryItemId) {
        inventoryItemId = aInventoryItemId;
    }


    // other methods


    public XxcssMatProdInfoType loadFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        Object[] attributes=struct.getAttributes();
        instanceId=(BigDecimal)attributes[0];
        serialNumber=(String)attributes[1];
        inputProductName=(String)attributes[2];
        ibProductName=(String)attributes[3];
        productStatus=(String)attributes[4];
        installLocationTypeCode=(String)attributes[5];
        installLocationId=(BigDecimal)attributes[6];
        location=(String)attributes[7];
        productFamily=(String)attributes[8];
        instanceQuantity=(BigDecimal)attributes[9];
        snFound=(String)attributes[10];
        pnFound=(String)attributes[11];
        snPnFound=(String)attributes[12];
        snPfFound=(String)attributes[13];
        inventoryItemId=(BigDecimal)attributes[14];

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return this;
    }
    
    public STRUCT asStruct(Connection conn)
        throws SQLException {
        STRUCT struct=null;
        StructDescriptor sd=
            StructDescriptor.createDescriptor("APPS.XXCSS_MAT_PROD_INFO_TYPE",conn);
        Object[] attributes = new Object[]{
            instanceId,
            ((serialNumber==null) ? null : new CHAR(serialNumber,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((inputProductName==null) ? null : new CHAR(inputProductName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((ibProductName==null) ? null : new CHAR(ibProductName,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((productStatus==null) ? null : new CHAR(productStatus,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((installLocationTypeCode==null) ? null : new CHAR(installLocationTypeCode,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            installLocationId,
            ((location==null) ? null : new CHAR(location,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((productFamily==null) ? null : new CHAR(productFamily,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            instanceQuantity,
            ((snFound==null) ? null : new CHAR(snFound,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((pnFound==null) ? null : new CHAR(pnFound,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((snPnFound==null) ? null : new CHAR(snPnFound,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            ((snPfFound==null) ? null : new CHAR(snPfFound,CharacterSet.make(CharacterSet.UTF8_CHARSET))),
            inventoryItemId
        };
        struct=new STRUCT(sd,conn,attributes);

/* BEGIN PROTECT_BLOCK user_load_from_struct_code */
/* END PROTECT_BLOCK user_load_from_struct_code */

        return struct;
    }
    
    public static XxcssMatProdInfoType newFromStruct(Connection conn,STRUCT struct) 
        throws SQLException,InstantiationException,IllegalAccessException {
        XxcssMatProdInfoType newInstance=newInstance();
        newInstance.loadFromStruct(conn,struct);
/* BEGIN PROTECT_BLOCK user_new_from_struct_code */
/* END PROTECT_BLOCK user_new_from_struct_code */

        return newInstance;
    }
    
    public String toString() {
        StringBuffer toStringBuffer = new StringBuffer();
        toStringBuffer.append(getClass());
        toStringBuffer.append("@");
        toStringBuffer.append(super.hashCode());
        toStringBuffer.append("[");
        this.appendToStringAttributes(toStringBuffer);
        toStringBuffer.append("]");
        return toStringBuffer.toString();
    }     

    protected void appendToStringAttributes(StringBuffer sb) {
        sb.append("instanceId=").append(instanceId);
        sb.append(",serialNumber=").append(serialNumber);
        sb.append(",inputProductName=").append(inputProductName);
        sb.append(",ibProductName=").append(ibProductName);
        sb.append(",productStatus=").append(productStatus);
        sb.append(",installLocationTypeCode=").append(installLocationTypeCode);
        sb.append(",installLocationId=").append(installLocationId);
        sb.append(",location=").append(location);
        sb.append(",productFamily=").append(productFamily);
        sb.append(",instanceQuantity=").append(instanceQuantity);
        sb.append(",snFound=").append(snFound);
        sb.append(",pnFound=").append(pnFound);
        sb.append(",snPnFound=").append(snPnFound);
        sb.append(",snPfFound=").append(snPfFound);
        sb.append(",inventoryItemId=").append(inventoryItemId);

    }
    
    public Object clone() throws CloneNotSupportedException {
        XxcssMatProdInfoType theClone = (XxcssMatProdInfoType) super.clone();
        


        return theClone;
    }
    
    public boolean equals(Object obj) {
        boolean retVal = false;
        if (obj != null) {
            retVal = (hashCode()==obj.hashCode());   
        }
        return retVal; 
    }
    
    public int hashCode() {
        StringBuffer hashStringBuffer = new StringBuffer();
        
        hashStringBuffer.append("instanceId=").append(instanceId);
        hashStringBuffer.append("serialNumber=").append(serialNumber);
        hashStringBuffer.append("inputProductName=").append(inputProductName);
        hashStringBuffer.append("ibProductName=").append(ibProductName);
        hashStringBuffer.append("productStatus=").append(productStatus);
        hashStringBuffer.append("installLocationTypeCode=").append(installLocationTypeCode);
        hashStringBuffer.append("installLocationId=").append(installLocationId);
        hashStringBuffer.append("location=").append(location);
        hashStringBuffer.append("productFamily=").append(productFamily);
        hashStringBuffer.append("instanceQuantity=").append(instanceQuantity);
        hashStringBuffer.append("snFound=").append(snFound);
        hashStringBuffer.append("pnFound=").append(pnFound);
        hashStringBuffer.append("snPnFound=").append(snPnFound);
        hashStringBuffer.append("snPfFound=").append(snPfFound);
        hashStringBuffer.append("inventoryItemId=").append(inventoryItemId);

        return hashStringBuffer.toString().hashCode();
    }
      
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
