/*****************************************************************************
 * XxcssMatSrCrSites.java
 *
 * Copyright 2001-2003 Cisco Systems, Inc. All Rights Reserved.
 * This software is the proprietary information of  Cisco Systems, Inc.
 *
 * NOTE:
 * This file was generated by the genJava script.  Please only make
 * changes to the file within protect blocks to ensure your changes are 
 * preserved when this file is next regenerated.
 * 
 *****************************************************************************/

package com.cisco.mcm.genJava;

/* Begin generated import statements */
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;

import oracle.jdbc.driver.OracleTypes;
import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
import oracle.sql.STRUCT;

import com.cisco.ca.fea.daoservices.DAOServices;
import com.cisco.ca.fea.daoservices.util.ConnectionUtil;
import com.cisco.mcm.bo.McmStatusDetailContext;
 


/* End generated import statements */

/* BEGIN PROTECT_BLOCK user_imports */
/* END PROTECT_BLOCK user_imports */

 


public class XxcssMatSrCrSites extends Object implements java.io.Serializable {

    private static XxcssMatSrCrSites theInstance=null;
    
/* BEGIN PROTECT_BLOCK user_member_variables */
/* END PROTECT_BLOCK user_member_variables */

    


/* BEGIN PROTECT_BLOCK user_public_constants */
/* END PROTECT_BLOCK user_public_constants */


/* BEGIN PROTECT_BLOCK user_static_initializers */
/* END PROTECT_BLOCK user_static_initializers */


    public static synchronized XxcssMatSrCrSites getInstance() {
        if (theInstance==null) {
            theInstance = new XxcssMatSrCrSites();
        }
        return theInstance;
    }
    
    private XxcssMatSrCrSites() {
/* BEGIN PROTECT_BLOCK user_private_constructor */
/* END PROTECT_BLOCK user_private_constructor */

    }
    

    
    private static ARRAY buildOracleArrayFromList(Connection conn,List list,com.cisco.mcm.genJava.XxcssMatSrCrPrntType dummy)
        throws SQLException {
       // ARRAY oracleArray=null;
        com.cisco.mcm.genJava.XxcssMatSrCrPrntType element=null;
        Object[] jarray=null;
        STRUCT struct=null;
        ArrayDescriptor desc=
            ArrayDescriptor.createDescriptor("APPS.XXCSS_MAT_SR_CR_PRNT_TAB_TYPE",conn);
        int i=0;
        if (list!=null) {
            jarray=new Object[list.size()];
            Iterator iterator=list.iterator();
            while (iterator.hasNext()) {
                element=(com.cisco.mcm.genJava.XxcssMatSrCrPrntType)iterator.next();
                struct=element.asStruct(conn);
                jarray[i++]=struct;
            }
        }
        return new ARRAY(desc,conn,jarray);
    }

       

    public String getCtlParamVal(
        DAOServices services,
        String lookupType,
        String lookupCode)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin :1 := xxcss_mat_sr_cr_sites.get_ctl_param_val(:2,:3); end;");
            stmt.setString(2,lookupType);
            stmt.setString(3,lookupCode);
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.execute();
            String retval=null;
            retval=(String)stmt.getString(1);
            return retval;

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void srCrSitesDownloadHdrInfo(
        DAOServices services,
        McmStatusDetailContext matStatusDetail
        )
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        BigDecimal upldrequestid = null;
        BigDecimal[] totalLinesSubmitted=new BigDecimal[1];
        BigDecimal[] numOfSitesFound=new BigDecimal[1];
        BigDecimal[] numOfSitesNotFound = new BigDecimal[1];
        CallableStatement stmt=null;
        boolean searchType = false;
        System.out.println("============> Inside srCrSitesDownloadHdrInfo Method =======>"+matStatusDetail);
        if (matStatusDetail.getRequestType() != null
		    && matStatusDetail.getRequestType().equalsIgnoreCase(
			    "MAT_BEST_SR_CR_SITES")) {
		searchType = true;
	    }
        try {
            conn = services.borrowConnection();
        
            stmt = conn.prepareCall("begin APPS.xxcss_mat_sr_cr_sites.sr_cr_sites_download_hdr_info(:1,:2,:3,:4); end;");
            stmt.setBigDecimal(1,upldrequestid);
            stmt.registerOutParameter(2, OracleTypes.NUMBER);
            stmt.registerOutParameter(3, OracleTypes.NUMBER);
            stmt.registerOutParameter(4, OracleTypes.NUMBER);
            stmt.execute();
            System.out.println("---------------Query Got executed succesfully -----------");
            totalLinesSubmitted[0]=(BigDecimal)stmt.getBigDecimal(2);
            numOfSitesFound[0]=(BigDecimal)stmt.getBigDecimal(3);
            numOfSitesNotFound[0]=(BigDecimal)stmt.getBigDecimal(4);
            if(totalLinesSubmitted[0]!=null)
            matStatusDetail.setLinesSubmitted(totalLinesSubmitted[0].intValue());
            if(numOfSitesFound[0]!=null)
	    matStatusDetail.setLinesFoundorCreated(numOfSitesFound[0].intValue());
	    if (searchType){
		if(numOfSitesNotFound[0]!=null)
		matStatusDetail.setLinesNotFound(numOfSitesNotFound[0].intValue());
	    }

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void logSrCrSitesParent(
        DAOServices services,
        java.util.List srCrSitesOut,
        String[] returnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_sr_cr_sites.log_sr_cr_sites_parent(:1,:2); end;");
            stmt.setArray(1,buildOracleArrayFromList(services.getNativeConnection(conn),srCrSitesOut,(com.cisco.mcm.genJava.XxcssMatSrCrPrntType)null));
            stmt.registerOutParameter(2, OracleTypes.VARCHAR);
            stmt.execute();
            returnStatus[0]=(String)stmt.getString(2);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void matBestSrCrSites(
        DAOServices services,
        BigDecimal upldrequestid,
        String ccouserid,
        BigDecimal[] successCount,
        BigDecimal[] errorCount,
        BigDecimal[] partialSuccessCount,
        BigDecimal[] pendingCount,
        String[] returnStatus)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_sr_cr_sites.mat_best_sr_cr_sites(:1,:2,:3,:4,:5,:6,:7); end;");
            stmt.setBigDecimal(1,upldrequestid);
            stmt.setString(2,ccouserid);
            stmt.registerOutParameter(3, OracleTypes.NUMBER);
            stmt.registerOutParameter(4, OracleTypes.NUMBER);
            stmt.registerOutParameter(5, OracleTypes.NUMBER);
            stmt.registerOutParameter(6, OracleTypes.NUMBER);
            stmt.registerOutParameter(7, OracleTypes.VARCHAR);
            stmt.execute();
            successCount[0]=(BigDecimal)stmt.getBigDecimal(3);
            errorCount[0]=(BigDecimal)stmt.getBigDecimal(4);
            partialSuccessCount[0]=(BigDecimal)stmt.getBigDecimal(5);
            pendingCount[0]=(BigDecimal)stmt.getBigDecimal(6);
            returnStatus[0]=(String)stmt.getString(7);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    public void matBestCrSites(
        DAOServices services,
        String[] errbuf,
        BigDecimal[] retcode,
        BigDecimal upldRequestId)
        throws SQLException,InstantiationException,IllegalAccessException {
        Connection conn=null;
        CallableStatement stmt=null;
        try {
            conn = services.borrowConnection();
            stmt = conn.prepareCall("begin xxcss_mat_sr_cr_sites.mat_best_cr_sites(:1,:2,:3); end;");
            stmt.registerOutParameter(1, OracleTypes.VARCHAR);
            stmt.registerOutParameter(2, OracleTypes.NUMBER);
            stmt.setBigDecimal(3,upldRequestId);
            stmt.execute();
            errbuf[0]=(String)stmt.getString(1);
            retcode[0]=(BigDecimal)stmt.getBigDecimal(2);

        } finally  {
            try {
                ConnectionUtil.closeQuietly(stmt);
            } finally {
                services.returnConnection(conn);
            }
        }
    }


    
/* BEGIN PROTECT_BLOCK user_java_code */
/* END PROTECT_BLOCK user_java_code */

}
